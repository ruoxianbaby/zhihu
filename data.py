data = {'initialState': {'common': {'ask': {}}, 'privacy': {'showPrivacy': False}, 'loading': {'global': {'count': 0}, 'local': {'people/get/': False, 'switches/getVipSwitches/': False, 'people/getActivities/aiyou_wocao': False}}, 'entities': {'users': {'aiyou_wocao': {'isFollowed': False, 'educations': [{'school': {'introduction': '', 'avatarUrl': 'https://pic1.zhimg.com/e82bab09c_is.jpg', 'name': '游侠派', 'url': 'http://www.zhihu.com/topics/', 'type': 'topic', 'excerpt': '', 'id': ''}, 'major': {'introduction': '', 'avatarUrl': 'https://pic1.zhimg.com/e82bab09c_is.jpg', 'name': '行吟四方', 'url': 'http://www.zhihu.com/topics/', 'type': 'topic', 'excerpt': '', 'id': ''}, 'diploma': 0}], 'followingCount': 203, 'voteFromCount': 0, 'userType': 'people', 'includedText': '', 'pinsCount': 0, 'isFollowing': False, 'isPrivacyProtected': False, 'accountStatus': [], 'includedArticlesCount': 0, 'isForceRenamed': False, 'id': '6a49911d7fa411c39beb1684516f19bd', 'favoriteCount': 6, 'voteupCount': 19, 'commercialQuestionCount': 0, 'isBlocking': False, 'followingColumnsCount': 22, 'headline': '艺术，文学。。。', 'urlToken': 'aiyou_wocao', 'participatedLiveCount': 0, 'isAdvertiser': False, 'followingFavlistsCount': 17, 'favoritedCount': 10, 'isOrg': False, 'followerCount': 6, 'employments': [{'company': {'introduction': '', 'avatarUrl': 'https://pic1.zhimg.com/e82bab09c_is.jpg', 'name': '圣扬斯坦', 'url': 'http://www.zhihu.com/topics/', 'type': 'topic', 'excerpt': '', 'id': ''}, 'job': {'introduction': '魔法师是在“欧美民间传说”、幻想文学、桌面和电子游戏中经常被提及的角色，指可以驱使某种神秘力量的人群。魔法师就是那些能够变魔法的人，不论这种魔法是邓布利多教授在魔法学校教授的那些，还是乡村巫师念的咒语那样的小把戏，或者是舞台逃脱魔术表演大师胡迪尼表演的那种魔法。在世界的各种文化中都存在这样的神奇魔法师。', 'avatarUrl': 'https://pic2.zhimg.com/v2-6e6ef9e26dc607649d70f6ffd64ae3a5_is.jpg', 'name': '魔法师', 'url': 'http://www.zhihu.com/topics/19674514', 'type': 'topic', 'excerpt': '魔法师是在“欧美民间传说”、幻想文学、桌面和电子游戏中经常被提及的角色，指可以驱使某种神秘力量的人群。魔法师就是那 些能够变魔法的人，不论这种魔法是邓布利多教授在魔法学校教授的那些，还是乡村巫师念的咒语那样的小把戏，或者是舞台逃脱魔术表演大师胡迪尼表演的那种魔法。在世界的各种文化中都存在这样的神奇魔法师。', 'id': '19674514'}}], 'type': 'people', 'avatarHue': '', 'avatarUrlTemplate': 'https://pic4.zhimg.com/e0203d1c978484d69528ca6b02138913_{size}.jpg', 'followingTopicCount': 313, 'description': '人生何处不开怀，或绝路逢生，或半路得知己，赏花时吟得一二诗句，红尘繁复里有我的小兄弟，把酒烛下有红颜。<br>(鄙人年轻，不能输出，十分忏愧)', 'business': {'introduction': '法律，是国家的产物，是指统治阶级（泛指政治、经济、思想形态上占支配地位的阶级），为了实现统治并 管理国家的目的，经过一定立法程序，所颁布的基本法律和普通法律。法律是统治阶级意志的体现，国家的统治工具。法律是由享有立法权的立法机关（全国人民代表大会和全国人民代表大会常务委员会）行使国家立法权，依照法定程序制定、修改并颁布，并由国家强制力保证实施的基本法律和普通法律总称。包括基本法律、普通法律。法，可划分为1、宪法，2、法律，3、行政法规，4、地方性法规，5、自治条例和单行条例。宪法是高于其它法律部门（法律、行政法规、地方性法规、自治条例和单行条例）的国家根本大法，它规定国家制度和社 会制度最基本的原则，公民基本权利和义务，国家机构的组织及其活动的原则等。法律是从属于宪法的强制性规范，是宪法的具体化。宪法是国家法的基础与核心，法律则是国家法的重要组成部分。法律可划分为基本法律（如刑法、刑事诉讼法、民法通则、民事诉讼法、行政诉讼法、行政法、商法、国际法等）和普通法律（如商标法、文物保护法等）。行政法规，是国家行政机关（国务院）根据宪法和法律，制定的行政规范的总称。', 'avatarUrl': 'https://pic2.zhimg.com/f126e096216e4554289b0996539b79b5_is.jpg', 'name': '法律', 'url': 'http://www.zhihu.com/topics/19550874', 'type': 'topic', 'excerpt': '法律，是国家的产物，是指统治阶级（泛指政治、经济、思想形态上占支配地位的阶级），为了实现统治并管理国家的目的，经过一定立法程序，所颁布的基本法律和普通法律。法律是统治阶级意志的体现，国家的统治工具。法律是由享有立法权的立法机关（全国人民代表大会和全国人民代表大会常务委员会）行使国家立法权，依照法定程序制定、修改并颁布，并由国家强制力保证实施的基本法律和普通法律总称。包括基本法律、普通法律。法，可…', 'id': '19550874'}, 'avatarUrl': 'https://pic4.zhimg.com/e0203d1c978484d69528ca6b02138913_is.jpg', 'columnsCount': 0, 'hostedLiveCount': 0, 'isActive': 1, 'thankToCount': 0, 'mutualFolloweesCount': 0, 'coverUrl': 'https://pic4.zhimg.com/v2-c4469111ebb3eec5138d65f8d2a0136d_r.jpg', 'thankFromCount': 0, 'voteToCount': 0, 'isBlocked': False, 'answerCount': 6, 'allowMessage': False, 'articlesCount': 0, 'name': 'hi-captain', 'questionCount': 1, 'locations': [{'introduction': '', 'avatarUrl': 'https://pic1.zhimg.com/e82bab09c_is.jpg', 'name': '金陵', 'url': 'http://www.zhihu.com/topics/', 'type': 'topic', 'excerpt': '', 'id': ''}], 'badge': [], 'includedAnswersCount': 0, 'vipInfo': {'isVip': False}, 'url': 'http://www.zhihu.com/people/6a49911d7fa411c39beb1684516f19bd', 'messageThreadToken': '0722034200', 'logsCount': 29, 'followingQuestionCount': 350, 'orgRecruitment': {'isEnableRecruitment': False, 'recruitmentNum': 0, 'isShowCard': False}, 'thankedCount': 5, 'gender': 1}}, 'questions': {'42178612': {'author': {'isFollowed': False, 'type': 'people', 'name': '段小穷', 'headline': '法学学生', 'urlToken': 'duan-xiao-qiong-67', 'userType': 'people', 'vipInfo': None, 'url': 'https://api.zhihu.com/people/3b4092b2aa7e574a53587becbe24ec4d', 'avatarUrl': 'https://pic2.zhimg.com/50/38ac55b94503e8f944cb0fe94304cf69_s.jpg', 'isFollowing': False, 'isOrg': False, 'gender': 1, 'badge': [], 'id': '3b4092b2aa7e574a53587becbe24ec4d'}, 'relationship': {'isAuthor': False, 'isFollowing': False}, 'created': 1459871070, 'url': 'https://api.zhihu.com/questions/42178612', 'title': '你们家乡最让人感到震惊和恐怖的杀人案是什么？', 'excerpt': '', 'detail': '', 'answerCount': 810, 'boundTopicIds': [215, 8049, 24479, 63577], 'commentCount': 5, 'isFollowing': False, 'followerCount': 4965, 'type': 'question', 'id': 42178612}}, 'answers': {'370158183': {'relationship': {'isAuthor': False, 'voting': 0, 'isThanked': False, 'isNothelp': False, 'upvotedFolloweeIds': []}, 'markInfos': [], 'excerpt': '我们知道，迅雷变大就开始作了，强制购买会员，付费，让人不甚反感。而且很多资源要过滤，这就很尴尬了好吧，今天为大家推荐十几款下载 工具，让大家终于再也不用迅雷了(～ o ～)~zZ GUI-YouGetGUI-YouGet 是一款下载神器，使用它可以轻松下载各大视频网站的视频和音频。它汇集了you-get 和youtube-dl 两个强大 的工具，比如什么优酷，乐视，网易云它都支持，AB 站等等。你只需把视频链接给它，它就可以轻松下载。同时它还支持代理…', 'createdTime': 1524052027, 'previewType': 'default', 'id': 370158183, 'isCopyable': False, 'author': {'isFollowed': False, 'type': 'people', 'name': 'Tikitoo', 'headline': '公众号：高效率工具搜罗，分享实用App 和效率工具。', 'urlToken': 'tikitoo', 'userType': 'people', 'vipInfo': None, 'url': 'https://api.zhihu.com/people/93ec088d2225742aafc183009decf7db', 'avatarUrl': 'https://pic2.zhimg.com/50/v2-41310c85c7bb5614194b7d7ca44037ec_s.jpg', 'isFollowing': False, 'isOrg': False, 'gender': 1, 'badge': [], 'id': '93ec088d2225742aafc183009decf7db'}, 'url': 'https://api.zhihu.com/answers/370158183', 'commentPermission': 'all', 'question': {'author': {'isFollowed': False, 'type': 'people', 'name': '陈一七', 'headline': '人二，心直，爱跑题。', 'urlToken': 'allsaying', 'userType': 'people', 'vipInfo': None, 'url': 'https://api.zhihu.com/people/19f648594f44ee197c379e91420d880a', 'avatarUrl': 'https://pic4.zhimg.com/50/e6752cb0b_s.jpg', 'isFollowing': False, 'isOrg': False, 'gender': 1, 'badge': [], 'id': '19f648594f44ee197c379e91420d880a'}, 'created': 1313666865, 'url': 'https://api.zhihu.com/questions/19820075', 'title': '除了迅雷外，还有什么靠谱的下载软件？', 'excerpt': '', 'answerCount': 161, 'boundTopicIds': [1048, 9516], 'commentCount': 18, 'isFollowing': False, 'followerCount': 8295, 'type': 'question', 'id': 19820075}, 'updatedTime': 1524052027, 'content': '<p>我们知道，迅雷变大就开始作了，强制购买会员，付费，让人不甚反感。而且很多资源要过滤，这就很尴尬了好吧，今天为大家推荐十几款下载工具，让大家终于再也不用迅雷了(～ o ～)~zZ</p><p><br></p><p><br></p><h2>GUI-YouGet</h2><figure><img src="https://pic2.zhimg.com/v2-413154c468428f7559592baaba7e208b_b.jpg" data-caption="" data-size="normal" data-rawwidth="1131" data-rawheight="579" class="origin_image zh-lightbox-thumb" width="1131" data-original="https://pic2.zhimg.com/v2-413154c468428f7559592baaba7e208b_r.jpg"></figure><p>GUI-YouGet 是一款下载神器，使用它可以轻松下载各大视频网站的视频和音频。</p><p>它汇集了you-get 和youtube-dl 两个强大的工具，比如什么优酷，乐视，网易云它都支持，AB 站等等。你只需把视频链接给它，它就可以轻松下载。</p><p>同时它还支持代理，支持Windows 和Linux 。</p><p>PS：使用它需要你安装JDK 和JRE，可能一般人不太懂啊，这个效率君以后给大家科普哦。</p><p><br></p><p><br></p><h2>Folx 5 </h2><figure><img src="https://pic3.zhimg.com/v2-b1083726f49c996ab54d937da8e5f63f_b.jpg" data-caption="" data-size="normal" data-rawwidth="844" data-rawheight="379" class="origin_image zh-lightbox-thumb" width="844" data-original="https://pic3.zhimg.com/v2-b1083726f49c996ab54d937da8e5f63f_r.jpg"></figure><p>Folx 是一款Mac 专用下载器工具。</p><p>它还支持加速下载，可以分成多个线程下载，还支持断点续传。</p><p>它还支持下载磁力链 / 种子。</p><p>它的专业版还支持BT 搜索和YouTube 下载，还有高达10 个线程同步下载，让下载速度更 快，还能记住FTP 和网站的密码，以后下载就不用验证了。</p><p>它还集成Spotlight，支持Retina 高清视网膜屏。</p><p>它还有浏览器插件，可以监控抓取下载地址，还可以手动选择下载。</p><p><br></p><p><br></p><h2>FDM（Free Download Manager）</h2><figure><img src="https://pic3.zhimg.com/v2-19f6fc020e802aaccd37413720f0c5cf_b.jpg" data-caption="" data-size="normal" data-rawwidth="483" data-rawheight="336" class="origin_image zh-lightbox-thumb" width="483" data-original="https://pic3.zhimg.com/v2-19f6fc020e802aaccd37413720f0c5cf_r.jpg"></figure><p>FDM 也算是一个比较强大的下载工具。FDM 名副其实就是IDM 的免费版了。</p><p>毕竟是免费的软件，但也只是比IDM 稍微逊色一点。</p><p>它支持FTP，HTTP(S)，还有BT 下载，当然你也可以添加代理。</p><p>同时你还可以定时下载任务，也支持多线程下载，同时还可以查看多线程的进度。</p><p>它还支持远程控制下载，还支持断点续传功能。</p><p>同时还支持国外视频网站下载，支持浏览器插件，自动捕捉可下载文件，右键即可下载。</p><p>同时支持Win 和Mac 版。同时支持中文。</p><p><br></p><p><br></p><h2>ADM Pro </h2><figure><img src="https://pic4.zhimg.com/v2-3535cf91b9d5fd98e224c71123803690_b.jpg" data-caption="" data-size="normal" data-rawwidth="1557" data-rawheight="924" class="origin_image zh-lightbox-thumb" width="1557" data-original="https://pic4.zhimg.com/v2-3535cf91b9d5fd98e224c71123803690_r.jpg"></figure><p>ADM Pro 是一个强大的下载器工具，它超级实用，而且功能强大。</p><p>它支持同时下载三个任务，还可以使用多线程加速下载。</p><p>它还可以直接 从浏览器或者从粘贴板中获取链接下载。</p><p>它还可以下载各大网盘的文件，它还自动识别不同类型的文件并且分类。</p><p>还有仅WiFi 下载，还根据不同的移动网速，提供更快 的速度，还支持断点续传。</p><p><br></p><p><br></p><h2>视频下载王 </h2><figure><img src="https://pic3.zhimg.com/v2-e41a91debf80ed04103a4a6f59395e6d_b.jpg" data-caption="" data-size="normal" data-rawwidth="660" data-rawheight="406" class="origin_image zh-lightbox-thumb" width="660" data-original="https://pic3.zhimg.com/v2-e41a91debf80ed04103a4a6f59395e6d_r.jpg"></figure><p>视频下载王是一款视频下载工具。</p><p>不仅支持国外的YouTube，Vimeo，还支持国内的优酷，哔哩哔哩，腾讯视频等国内各 大视频网站，它还支持抓取加密视频。</p><p>你只需要复制视频URL，就可以一键下载了。它还有【一键探测】功能，当你开启之后，当你在播放的时候，它就会自动下载。</p><p>下 载时，你还可以随意选择下载格式，还支持边下边播，体验真是棒棒的。</p><p>它还自带录屏，格式转换小工具。</p><p>它支持Win 和Mac。</p><p><br></p><p><br></p><h2>Aria2 </h2><figure><img src="https://pic3.zhimg.com/v2-d24f4c24358ce36ce5fbb3bfe928c5a7_b.jpg" data-caption="" data-size="normal" data-rawwidth="1920" data-rawheight="892" class="origin_image zh-lightbox-thumb" width="1920" data-original="https://pic3.zhimg.com/v2-d24f4c24358ce36ce5fbb3bfe928c5a7_r.jpg"></figure><p>Aria2 是一个轻量级多协议多平台的开源下载工具。</p><p>它支持HTTP，HTTPS，FTP，BT 等多种格式下载。</p><p>它虽然是命令行工具，但是有人把它做出了易操作的软件操作，就是那种小白都可 以操作的。</p><p>使用它可以搭配插件来实现百度云高速下载，迅雷离线下载，115 网盘下载，同时支持多线程下载，还可以伪装成各种客户端。而且速度也是不错。</p><p>同时支持Win 和Mac，Linux 和网页版。</p><p><br></p><h2><b>Armorfly 下载利器</b> </h2><figure><img src="https://pic1.zhimg.com/v2-2b45f786c28c95c06afc11d3aa96262e_b.jpg" data-caption="" data-size="normal" data-rawwidth="1387" data-rawheight="824" class="origin_image zh-lightbox-thumb" width="1387" data-original="https://pic1.zhimg.com/v2-2b45f786c28c95c06afc11d3aa96262e_r.jpg"></figure><p>Armorfly 是猎豹推出的一款Android 智能下载工具浏览器。</p><p>你不管播放什么视频网站，它都支持智能识别视频，并且在右上角显示下载按钮，可以一键点击下载。</p><p>而且它还支持广告拦截，隔绝恶意网站，私人保险箱，保护你的文件视频等。</p><p>当然它也不是纯属下载工具，也可以把它当做一个简洁的浏览器，使用起来也不错，它支持预加载，页面调整等。</p><p><br></p><p><br></p><hr><p>如果你有其他好用的下载工具，欢迎在下面留言讨论(～ o ～)~zZ</p><p>大家觉得不错，可以点个赞支持一下哦。</p><p>包括上面7 个，一共《<b>10 个神器下载工具</b>》打包下载，关注我的公众号：<b>高效率工具搜罗</b>：（gongju006），回复 ：<b>下载</b>。</p><p></p>', 'commentCount': 429, 'voteupCount': 8434, 'reshipmentSettings': 'need_payment', 'thanksCount': 3490, 'excerptNew': '我们知道，迅雷变大 就开始作了，强制购买会员，付费，让人不甚反感。而且很多资源要过滤，这就很尴尬了好吧，今天为大家推荐十几款下载工具，让大家终于再也不用迅雷了(～ o ～)~zZ GUI-YouGet GUI-YouGet 是一款下载神器，使用它可以轻松下载各大视频网站的视…', 'previewText': '', 'canComment': {'status': True, 'reason': ''}, 'type': 'answer', 'thumbnail': 'https://pic4.zhimg.com/50/v2-3535cf91b9d5fd98e224c71123803690_200x112.jpg'}, '449769461': {'relationship': {'isAuthor': False, 'voting': 0, 'isThanked': False, 'isNothelp': False, 'upvotedFolloweeIds': []}, 'markInfos': [], 'excerpt': '这个问题我可以回答一些，反正现在也不做了，也不怕你们跟我抢活干。自从去年大龄青年自学python以后（<a href="https://www.zhihu.com/question/36174619/answer/146343520" class="internal">知乎用户：请问已经年满三十岁的男人还有可能转行学计算机编程吗？</a>） ，深深的觉得自己欠缺太多编码知识，而且当时正好交了新女朋友，花销巨大，然后我就去决定找个兼职干干。首先我知道淘宝有很多代码代写服务，然后我就挨着每个淘宝店问店主，问他们要不要兼职，有没有群，拉我进去。然后就开始接活了，前前后后做了2个多月…', 'createdTime': 1532323348, 'previewType': 'default', 'id': 449769461, 'isCopyable': True, 'author': {'isFollowed': False, 'type': 'people', 'name': '小猪', 'headline': '', 'urlToken': 'finalfantasy10', 'userType': 'people', 'vipInfo': None, 'url': 'https://api.zhihu.com/people/c79725f764160474b132eaadbd4d8332', 'avatarUrl': 'https://pic2.zhimg.com/50/v2-f716aa90f501c18dfd8273c0514af8e4_s.jpg', 'isFollowing': False, 'isOrg': False, 'gender': 1, 'badge': [], 'id': 'c79725f764160474b132eaadbd4d8332'}, 'url': 'https://api.zhihu.com/answers/449769461', 'commentPermission': 'all', 'question': {'author': {'isFollowed': False, 'type': 'people', 'name': '云峥', 'headline': '', 'urlToken': 'ethan-12-86', 'userType': 'people', 'vipInfo': None, 'url': 'https://api.zhihu.com/people/cdc87d9d66256eba6d6f95d94165b61a', 'avatarUrl': 'https://pic4.zhimg.com/50/da8e974dc_s.jpg', 'isFollowing': False, 'isOrg': False, 'gender': 1, 'badge': [], 'id': 'cdc87d9d66256eba6d6f95d94165b61a'}, 'created': 1522586985, 'url': 'https://api.zhihu.com/questions/270720694', 'title': '自学 Python 之后如果不去公司上班，自己一个人可以通过此技能挣什么钱？', 'excerpt': '自学 Python 之后如果不去公司上班，自己一个人可以通过此技能挣什么钱？', 'answerCount': 77, 'boundTopicIds': [872, 7388, 37027, 53655], 'commentCount': 4, 'isFollowing': False, 'followerCount': 5904, 'type': 'question', 'id': 270720694}, 'updatedTime': 1537189236, 'content': '<p>这个问题我可以回答一些，反正现在也不做了，也不怕你们跟我抢活干。</p><p>自从去年大龄青年自学python以后（<a href="https://www.zhihu.com/question/36174619/answer/146343520" class="internal">知乎用户：请问已经年满三十岁的男人还有可能转行学计算机编程吗？</a>），深深的觉得自己欠缺 太多编码知识，而且当时正好交了新女朋友，花销巨大，然后我就去决定找个兼职干干。</p><p>首先我知道淘宝有很多代码代写服务，然后我就挨着每个淘宝店问店主，问他们要不要 兼职，有没有群，拉我进去。</p><p>然后就开始接活了，前前后后做了2个多月，赚了估计有4000？？群里面的活很多，但是我能做的挺少的，而且我要价低，100元就能做。</p><p>这个期间又接触了很多很多新的模块和python知识，对编程方面提升不少。</p><p>后来换了工作就没做了，大家可以去做做，特别是大学生���一个月赚2000外快还不美滋滋啊。</p><p><br></p><figure><img src="https://pic1.zhimg.com/v2-4ebb47aba01c4184fa8dc0fce03e57a7_b.jpg" data-caption="" data-size="normal" data-rawwidth="297" data-rawheight="773" class="content_image" width="297"></figure><figure><img src="https://pic3.zhimg.com/v2-bd2ae02c2d783b77ed72ad5bb67bcfbe_b.jpg" data-caption="" data-size="normal" data-rawwidth="205" data-rawheight="621" class="content_image" width="205"></figure><p><br></p><p>9月5日更新：</p><p>接到很多私信要求拉群的，其实去PC版QQ 里面的群搜索就可以按照名字找到。</p><p>还有问我达到什么高度可以接活，我给大家贴一个300的活：</p><figure><img src="https://pic3.zhimg.com/v2-a6820120bef95a22dfc77caf3d4e49f5_b.jpg" data-caption="" data-size="normal" data-rawwidth="315" data-rawheight="115" class="content_image" width="315"></figure><p>100的活：</p><figure><img src="https://pic2.zhimg.com/v2-b3e86540f95a4225d4025c0a32188fb9_b.jpg" data-caption="" data-size="normal" data-rawwidth="373" data-rawheight="137" class="content_image" width="373"></figure><p>大家说吧，是不是随便捡钱？？？我之前说的能做的挺少是因为只会python，一个群平均一天有三四个吧，但是里面有很多其他语言的活。</p><p>这是我每天打开QQ的状态（群太多都编号了）</p><figure><img src="https://pic3.zhimg.com/v2-787777f6da646ea418e270c0d4361e48_b.jpg" data-caption="" data-size="normal" data-rawwidth="196" data-rawheight="993" class="content_image" width="196"></figure><p>9月17日更新：</p><p>更新下群里稍微有点难度的题目，看着活都想接啊，但是实在没时间。</p><figure><img src="https://pic3.zhimg.com/v2-a50458647fd5fff1edcff51a28058160_b.jpg" data-caption="" data-size="normal" data-rawwidth="812" data-rawheight="203" class="origin_image zh-lightbox-thumb" width="812" data-original="https://pic3.zhimg.com/v2-a50458647fd5fff1edcff51a28058160_r.jpg"></figure><figure><img src="https://pic4.zhimg.com/v2-84c30bfc187ddf9288046290bcbe5e50_b.jpg" data-caption="" data-size="normal" data-rawwidth="862" data-rawheight="361" class="origin_image zh-lightbox-thumb" width="862" data-original="https://pic4.zhimg.com/v2-84c30bfc187ddf9288046290bcbe5e50_r.jpg"></figure><p></p>', 'commentCount': 119, 'voteupCount': 817, 'reshipmentSettings': 'allowed', 'thanksCount': 309, 'excerptNew': '这个问题我可以回答一些，反正现在也不做了，也不怕你们跟我抢活干。 自从去年大龄青年自学python以后（知乎用户：请问已经年满三十岁的男人还有可能转行学计算机编程吗？），深深的觉得自己欠缺太多编码知识，而且当时正好交了新女朋友，花销巨大，然后我就去…', 'previewText': '', 'canComment': {'status': True, 'reason': ''}, 'type': 'answer', 'thumbnail': ''}, '508371868': {'relationship': {'isAuthor': False, 'voting': 0, 'isThanked': False, 'isNothelp': False, 'upvotedFolloweeIds': []}, 'markInfos': [], 'excerpt': '唉呀妈呀，现在的学生真是好有钱啊。一万块的手机居然觉得 不贵，还一套一套说得振振有词。能比出苹果不贵这个结论也真是有脑子。中国真的提前跨过社会主义初级阶段了？回学校再学学摩尔定律吧，每一年半性能增加一倍，价格便宜一半。看看五年前5000块能买怎么样的电脑，现在呢。苹果贵，不是因为通胀，不是因为成本，不是因为关税。原因只有一个，它太了解它的目标用户啊，那是一群iSheep啊。都2018年了，苹果出了一款ppi是326的…', 'createdTime': 1539236330, 'previewType': 'default', 'id': 508371868, 'isCopyable': False, 'author': {'headline': '', 'avatarUrl': 'https://pic4.zhimg.com/aadd7b895_s.jpg', 'name': '匿名用户', 'url': '', 'urlToken': '', 'type': 'people', 'userType': 'people', 'id': '0'}, 'url': 'https://api.zhihu.com/answers/508371868', 'commentPermission': 'all', 'question': {'author': {'isFollowed': False, 'type': 'people', 'name': 'jijijison', 'headline': '专注回答科技/ 二次元/战争有关', 'urlToken': 'hou-zhi-hua-51', 'userType': 'people', 'vipInfo': None, 'url': 'https://api.zhihu.com/people/690757101b99f12e839c216289a283e4', 'avatarUrl': 'https://pic1.zhimg.com/50/v2-bcc8745db03f41a2d6760a9ab1132bd5_s.jpg', 'isFollowing': False, 'isOrg': False, 'gender': 1, 'badge': [], 'id': '690757101b99f12e839c216289a283e4'}, 'created': 1536791111, 'url': 'https://api.zhihu.com/questions/294430863', 'title': '如何看待苹果手机越来越高的起售价？', 'excerpt': '如题？', 'answerCount': 389, 'boundTopicIds': [18, 25, 25409, 177957, 184639], 'commentCount': 24, 'isFollowing': False, 'followerCount': 1048, 'type': 'question', 'id': 294430863}, 'updatedTime': 1539355950, 'content': '<p>唉呀妈呀，现在的学生真是好有钱啊。</p><p>一万块的手机居然觉得不贵，还一套一套说得振振有词。能比出苹果 不贵这个结论也真是有脑子。中国真的提前跨过社会主义初级阶段了？</p><p>回学校再学学摩尔定律吧，每一年半性能增加一倍，价格便宜一半。看看五年前5000块能买怎么样的电脑 ，现在呢。</p><p>苹果贵，不是因为通胀，不是因为成本，不是因为关税。原因只有一个，它太了解它的目标用户啊，那是一群iSheep啊。</p><p>都2018年了，苹果出了一款ppi是326的XR。你猜猜2015年发布的三星galaxy s6的ppi是多少？577. 那是577啊，果粉们。换一块ppi高一点的屏幕才几个钱。为毛苹果要做这么恶心的事情，iSheep们，动动你们的脑子？</p><p>因为把屏幕弄好了，就没人买利润更高的XS了。那为什么不给XR一个更实惠的价格？苹果是思路是，XS是给不差钱的iSheep准备的，XR是给差钱的iSheep准备的。库克说了，我们不做trash market，意思是，iPhone从来是给有钱人准备的。可是苹果怎么也不肯放过穷的iSheep，所以要出一个配置那么奇葩，价格又超过很多安卓旗舰的低端机来收割差钱iSheep这块市场。</p><p>苹果的闪存策略也是一样的恶心。起步64G，够干什么的。买64G，有人比做买了十亩地，然后在上面建一个一平米的厕所。那么找更大一点的型号吧，结果苹果就直接跳 过128G，达到256G了。这种极度鸡贼的定价和配置组合，我怎么看都觉得好恶心。</p><p>如何看待苹果手机越来越贵？苹果心里就是认为，爷就是可劲薅你们这些iSheep，薅到你们死 为止。</p><p>-------------------- 更新分割线 -----------------------</p><p>有iSheep反驳了，高PPI有什么用？有什么用，你别问我啊，你得问苹果啊，为什么XS的PPI比XR高 ？因为有用啊笨蛋。因为你手机能拍4K照片，视频啊，然后你的屏幕tm不支持啊。恩，拍了4k，压缩成1080p看，真香，是这个意思吗？有用没用，你拿两个手机对比一下不行了吗？</p><p>我引用一个Youtube播主的话：这么多年我们一直期待苹果作为行业的龙头，去推进那些cutting edge的技术，给用户提供最优秀的产品。不过我们看到的是，苹果总是刻意地hold back。当业界转向usb-c（包括Macbook），iPhone还是执着地用着lightning接口，导致iSheep买了全家桶要带着各种转换头出门，lighting转3.5mm，lightning转usb-c，usb-c转lightning，you name it！三星已经证明了保留3.5mm耳机接口不影响防水，但苹果还是移除了。这些年，苹果就tm做了一件事，make more money by providing less。</p><p>明年如果苹果把lighting接口都去掉，我都不会觉得奇怪，因为它要强推无线充电了。make more money by providing less AGAIN！！！！</p><p>作为一个手持pixel 1代的用户，我认为手机不应 该这么贵，不管什么原因手机都不应该这么贵！为什么一个通讯工具，计算平台被活生生地弄成了一个奢侈品？</p><p>认识一下Angela Ahrendts(安吉拉.阿伦茨)，目前担任苹果零售 部的副总裁职位。外界传闻是苹果下一届CEO。此人以前是巴宝莉的CEO。奢侈品！苹果要把自己的产品打造出奢侈品。奢侈品是什么？就是收割粉（脑）丝（残）的产品。</p><p>像我 这种只穿公司发的T-shirt，只穿200rmb的耐克打折球鞋的臭屌丝本来和奢侈品井水不犯河水。你买你的驴牌，猪牌，狗牌，我拎我的塑料袋。可是你们要把手机，这个目前对于普罗大 众（包括我这样的穷人）最重要的计算平台奢侈品化，我不高兴啊。</p><p>所以我抵制所有超过500美金的手机。今年的旗舰买不到，我买去年的旗舰。去年的全新旗舰买不到，我买去年的二手旗舰。去年的二手旗舰都买不到，我去买诺基亚的香蕉机。诺基亚的香蕉机都买不起了，我直接用google hangout打电话行不行！</p><p>-----------------再次更新分割线------------------</p><p>很高兴看到更多的iSheep跳出来，秀智商。iPhone是手机，不是你的万元全副单反或者莱卡。你去问问其他iSheep，有多少人拍了照片，视频是要放到家里的4k大电视或者高端显示器上细看的。</p><p>我可以说99%的iSheep在99%的应用场景下都是拍完立刻看，分享，发朋友圈。所以说，你有花5000+去买个设备，作为制作端，它具备了强悍 的拍摄4k的能力，却在输出端，在99%的场景下要先降低质量再显示。iSheep的脑子竟然能认为这是一个合理的事情！！！</p><p>再补充一个事实。galaxy s4，2013年的产品，ppi，441。都五年了啊，iSheep。</p><p>------------------再再次更新分割线----------------</p><p>终于有iSheep提到穷论和市场论了。先讲个故事。有个厕所运营商开了两个厕所，一 个一次一元，一个一次100元。当然百元厕所的马桶是纯金打造的。结果呢，当然绝大多数人都去一元厕所。运营商觉得这样不行。为了拉开差距，他开始给一元厕所取消厕纸，断水， 关掉通风装置。可是大部分人依然在使用一元厕。运营商没办法了，只能开始往一元厕的地面，墙面涂大便了。他终于成功了，之后所有的人都去百元厕所了。</p><p>你会问，为毛他 不直接修两个百元厕呢。因为不是所有人都能拿出一百块钱上厕所，如果你不提供一元厕，那部分用户你就永远失去了。</p><p>聪明的朋友已经看出来了，苹果给XR给这种劣等屏幕就 等同于厕所运营商的涂大便行为。那么你服不服？iSheep们去问问比尔盖茨和巴菲特，一百美金上一次厕所是可以接受的吗？这TM真的是钱的问题？</p><p>再说回市场论，这个世界上 有帮蠢货整天被商家压榨，却时时刻刻替他们操心。有些东西可以完全以市场论。最典型的就是奢侈品。你富贵阶级怎么样把玛莎拉蒂，劳斯莱斯天天换新，也不影响普通人买个卡罗拉开20年。但是公共服务是不能以市场论的。手机当然不是公共服务，但信息是。对信息的公平获取权，对社会的公平正义至关重要。</p><p>其实哪怕苹果能把手机卖到十万rmb，我都无所谓。我关心的是，手机这个生产力工具正在苹果的带动下奢侈品化。iPhone在涨价，安卓也在涨价。PC是上个世代最重要的计算平台，我们一步一步看PC的价格越来越便宜，但是手机作为这个世代最重要的计算平台，我们看到的是旗舰机毫无节制地加价。我不得不说有那么一丝丝的忧虑，在此给小米点个赞。</p><p>---------------------------结局----------------------------</p><p>这个答案已经不会再更新。有人质疑匿名的问题。我认为你应该首重事实。因为是事实决定论点的正确与否，而不是屁股。关于我本人，不过就是一个在美国 年薪20万美金的普通工程师而已。肯定是比那些没工作的中国学生穷那么一丢丢的啦。爱信不信。</p><p>88</p>', 'commentCount': 1209, 'voteupCount': 4708, 'reshipmentSettings': 'disallowed', 'thanksCount': 337, 'excerptNew': '唉呀妈呀，现在的学生真是好有钱啊。 一万块的手机居然觉得不贵，还一套一套说得振振有词。能比出苹果不贵这个结论 也真是有脑子。中国真的提前跨过社会主义初级阶段了？ 回学校再学学摩尔定律吧，每一年半性能增加一倍，价格便宜一半。看看五年前5000块能买怎么…', 'previewText': '', 'canComment': {'status': True, 'reason': ''}, 'type': 'answer', 'thumbnail': ''}, '508850373': {'relationship': {'isAuthor': False, 'voting': 0, 'isThanked': False, 'isNothelp': False, 'upvotedFolloweeIds': []}, 'markInfos': [], 'excerpt': '几乎可以说是自古以来，历朝历代，全球各地，偷吃的，都算作最轻微的犯罪了吧。偷盗钱财，动辄断手刺字，偷牛羊这类生产工具，甚至要闹到人命。刑法这么严酷的中古，穷人饿了去寺庙里偷供果，去别人家坟前偷贡品，有时候不止网开一面，甚至还要给行个方便。所以悲惨世界里冉阿让才能会那么理直气壮地喊出来，我就偷了一条面包。 人都有恻隐之心。人总要填饱肚子。当然这样讲有人又会大骂圣母心，那换个他们能理解的角度来谈，你…', 'createdTime': 1539302656, 'previewType': 'expand', 'id': 508850373, 'isCopyable': False, 'author': {'isFollowed': False, 'type': 'people', 'name': '黑色光驱', 'headline': '公众号，黑色光驱。刚开通，不定期更新一些独立观点。', 'urlToken': 'li-ying-hao-54', 'userType': 'people', 'vipInfo': None, 'url': 'https://api.zhihu.com/people/8c38b17d06eaa9283cae52e4293a8e29', 'avatarUrl': 'https://pic1.zhimg.com/50/d43e21470_s.jpg', 'isFollowing': False, 'isOrg': False, 'gender': 1, 'badge': [], 'id': '8c38b17d06eaa9283cae52e4293a8e29'}, 'url': 'https://api.zhihu.com/answers/508850373', 'commentPermission': 'censor', 'question': {'author': {'headline': '', 'avatarUrl': 'https://pic4.zhimg.com/aadd7b895_s.jpg', 'name': '匿名用户', 'url': '', 'urlToken': '', 'type': 'people', 'userType': 'people', 'id': '0'}, 'created': 1539002495, 'url': 'https://api.zhihu.com/questions/297706336', 'title': '超市买东西碰到一个老人偷面包，女友要给他买，被我阻止了，谁错了？', 'excerpt': '刚刚下班 去超市买牛奶啥的，付钱的时候碰到个老爷爷偷了面包被抓了，看起来6.70岁。收银员跟他说下次这样就报警，让他走了。 看到这女友就要帮老人买下这个面包，被我拉住了，我跟他 说不管怎么样他都是偷东西了，偷东西这种行为不惩罚已经很好了绝对不能助长。虽然他可怜但也不是偷东西的理由。人家娘胎起单身的有需要难道就能qj了？ 女朋友白了我一眼说了 句直男。 付好钱走出超市，女朋友可能整理好了思路，开始怼我。说这个老人只是偷个面包，面包他出去讨饭难道没好心人给？人家肯定是没脸去要饭，实在饿得不行才会这样的。每 个人都有自尊心，一个面包而已怎么了。 我知道，一旦她开始讲道理了，以她的逻辑能力，我是绝对赢不了的。我想问问知乎的各位，我和女朋友谁的说法比较正确？ 我也是个善良的人，以前碰到人需要帮助给他们买了很多吃的还帮他们开了网吧让他们过夜。之前也发过帖。但这次不一样，如果老人叫我帮他，我肯定给他买面包饼干牛奶配齐了。但是他偷东西了，那不好意思我不会帮他。', 'answerCount': 462, 'boundTopicIds': [478, 1001, 1576, 5582, 167541], 'commentCount': 60, 'isFollowing': False, 'followerCount': 977, 'type': 'question', 'id': 297706336}, 'updatedTime': 1539302656, 'content': '<p>几乎可以说是自古以来，历朝历代，全球各地，偷吃的，都算作最轻微的犯罪了吧。</p><p>偷盗钱财，动辄断手刺字，偷牛羊这类生产工具，甚至要闹到人命。刑法这么严酷的中古，穷人饿了去寺庙里偷供果，去别人家坟前偷贡品，有时候不止网开一面，甚至还要给行个方便。</p><p>所以悲惨世界里冉阿让才能会那么理直气壮地喊出来，我就偷了一条面包。 </p><p>人都有恻隐之心。人总要填饱肚子。</p><p>当然这样讲有人又会大骂圣母心，那换个他们能理解的角度来谈，你要是不让他偷这顿吃的，后面他要做什么可就不一定了。题主当然是希望这老头去大门口乞讨，可就怕人家不这么想。</p><p>有些年轻人，没经历过什么事，认为所 有人都应该运行在自己轨道上，社会也该自有一套规则。可是他们不懂，人总有脱轨的时候，不能总叫那些脱轨的人自己去死。 社会也该有一套规则，可是这规则你眼看它变来变去， 毫无办法，更有许多强人无视规则，一次偷掉几个亿也不过写份检讨，叫你看的目瞪口呆。</p><p>豺狼当道，狐狸你都管不了，这时候身边走过一个小老鼠，就不要再义愤填膺了，没 劲。</p>', 'commentCount': 0, 'voteupCount': 1135, 'reshipmentSettings': 'need_payment', 'thanksCount': 113, 'excerptNew': '几乎可以说是自古以来，历朝历代，全球各地，偷吃的，都算作最轻微的犯罪了吧。 偷盗钱财，动辄断手刺字，偷牛羊这类生产工具，甚至要闹到人命。刑法这么严酷的中古，穷人饿了去寺庙里偷供果，去别人家坟前偷贡品， 有时候不止网开一面，甚至还要给行个方便。 所…', 'previewText': '几乎可以说是自古以来，历朝历代，全球各地，偷吃的，都算作最轻微的犯罪了吧。\n偷盗钱财，动辄断手刺字，偷牛羊这类生产工具，甚至要闹到人命。刑法这么严酷的中古，穷人饿了去寺庙里偷供果，去别人家坟前偷贡品，有时候不止网开一面，甚至还要给行个方便。\n所以悲惨世界里冉阿让才能会那么理直气壮地喊出来，我就偷了一条面包。\n人都有恻隐之心。人总要填饱肚子。\n当然这样讲有人又会大骂圣母心，那换个他们能理解的角度来谈，你要是不让他偷这顿吃的，后面他要做什么可就不一定了。题主当然是希望这老头去大门口乞讨，可就怕人家不这么想。\n有些年轻人，没经历过什么事，认为所有人都应该运行在自己轨道上，社会也该自有一套规则。可是他们不懂，人总有脱轨的时候，不能总叫那些脱轨的人自己去死。 社会也该有一套规则，可是这规则你眼看它变来变去，毫无办法，更有许多强人无视规则，一次偷掉 几个亿也不过写份检讨，叫你看的目瞪口呆。\n豺狼当道，狐狸你都管不了，这时候身边走过一个小老鼠，就不要再义愤填膺了，没劲。', 'canComment': {'status': True, 'reason': '请输入评论，您的评论将会由机构筛选后显示'}, 'type': 'answer', 'thumbnail': ''}, '513858598': {'relationship': {'isAuthor': False, 'voting': 0, 'isThanked': False, 'isNothelp': False, 'upvotedFolloweeIds': []}, 'markInfos': [], 'excerpt': '首先我觉得我要针对 <a class="member_mention" href="http://www.zhihu.com/people/9226176cb832987770e13e81c8a0ac07" data-hash="9226176cb832987770e13e81c8a0ac07" data-hovercard="p$b$9226176cb832987770e13e81c8a0ac07">@eechen</a> 称我「无脑黑 php」作出反驳和解释曾经我在知道我要写 php 但是还没有写 php 之前，看到过 <a class="member_mention" href="http://www.zhihu.com/people/3ec3b166992a5a90a1083945d2490d38" data-hash="3ec3b166992a5a90a1083945d2490d38" data-hovercard="p$b$3ec3b166992a5a90a1083945d2490d38">@贺师俊</a> 曾经写过的一些回答被一些 phper 说是 「无脑黑」 php；虽然我觉得「各种函数上的不一致」，「大小写不一致」等等很难算是无脑黑，但是，从上篇开始（<a href="https://zhuanlan.zhihu.com/p/45898479" class="internal">「PHP 讲屎 堂」系列目录</a> 和 <a href="https://www.zhihu.com/question/59820507/answer/502896422" class="internal">JX Consp：为什么有些程序员看不起 PHP 这门语言？</a>），为 了避免 PHPer 有人说我无脑黑，我准备在之后的行文中考虑以下约…', 'createdTime': 1539922733, 'previewType': 'default', 'id': 513858598, 'isCopyable': True, 'author': {'isFollowed': False, 'type': 'people', 'name': 'JX Consp', 'headline': '朱门酒肉臭，路有克苏鲁', 'urlToken': 'JX-Consp', 'userType': 'people', 'vipInfo': None, 'url': 'https://api.zhihu.com/people/ace55bee53f65086ccd880bf9c94018e', 'avatarUrl': 'https://pic3.zhimg.com/50/8472064f793a1390c893119261566176_s.jpg', 'isFollowing': False, 'isOrg': False, 'gender': 1, 'badge': [], 'id': 'ace55bee53f65086ccd880bf9c94018e'}, 'url': 'https://api.zhihu.com/answers/513858598', 'commentPermission': 'all', 'question': {'author': {'isFollowed': False, 'type': 'people', 'name': 'JX Consp', 'headline': '朱门酒肉臭，路有克苏鲁', 'urlToken': 'JX-Consp', 'userType': 'people', 'vipInfo': None, 'url': 'https://api.zhihu.com/people/ace55bee53f65086ccd880bf9c94018e', 'avatarUrl': 'https://pic3.zhimg.com/50/8472064f793a1390c893119261566176_s.jpg', 'isFollowing': False, 'isOrg': False, 'gender': 1, 'badge': [], 'id': 'ace55bee53f65086ccd880bf9c94018e'}, 'created': 1539812109, 'url': 'https://api.zhihu.com/questions/298967021', 'title': '为何 PHP 是多范式语言？', 'excerpt': 'PHP 虽然有很多特性，但是对于编程范式中必须的特性是不支持的；对于元编程，PHP 没有 quote，并且无法操作 AST对于 FP， PHP 没有 「函数作为第一成员」，没有 scope对于 OOP，既不支持静态型别检查，有不支持动态修改类或者类似的装饰器方法实 现委托 所以为什么 PHP 在缺乏这些特性的情况下还是多范式编程语言呢？', 'answerCount': 9, 'boundTopicIds': [898], 'commentCount': 2, 'isFollowing': False, 'followerCount': 36, 'type': 'question', 'id': 298967021}, 'updatedTime': 1540097174, 'content': '<p>首先我觉得我要针对 <a class="member_mention" href="http://www.zhihu.com/people/9226176cb832987770e13e81c8a0ac07" data-hash="9226176cb832987770e13e81c8a0ac07" data-hovercard="p$b$9226176cb832987770e13e81c8a0ac07">@eechen</a>  称我「无脑黑 php」作出反驳和解释</p><p>曾经我在知道我要写 php 但是还没有写 php 之前，看到过 <a class="member_mention" href="http://www.zhihu.com/people/3ec3b166992a5a90a1083945d2490d38" data-hash="3ec3b166992a5a90a1083945d2490d38" data-hovercard="p$b$3ec3b166992a5a90a1083945d2490d38">@贺师俊</a> 曾经写过的一些回答被一些 phper 说是 「无脑黑」 php；虽然我觉得「各种函数上的不一致」，「大小写不一致」等等很难算是无脑黑，但是，从上篇开始（<a href="https://zhuanlan.zhihu.com/p/45898479" class="internal">「PHP 讲屎堂」系列目录</a> 和 <a href="https://www.zhihu.com/question/59820507/answer/502896422" class="internal">JX Consp：为什么有些程序员看不起 PHP 这 门语言？</a>），为了避免 PHPer 有人说我无脑黑，我准备在之后的行文中考虑以下约束</p><ol><li>我不考虑可以用封装库解决的问题，比如不考虑 JSON api，in_array 默认 ==  等等</li><li>我不考虑各种 VM 实现的问题，比如 C 扩展常驻内存</li><li>我不考虑 PHP 文档的问题，不考虑 PHP 历史上的问题，比如 5.3 中不能 parse $cb()() </li><li>我不考虑 parser 的报错信息难读问题</li></ol><p>这样我们可以说，我们将要讲的问题是 PHP 作为编程语言上的问题了。如果再说我是「无脑黑」的话，我只能说我不能用 PHPer 的脑 子黑 php，我只能用 coder 的脑子黑 php。</p><p><br></p><p>文章内容目录：</p><ol><li>FP：<code>set!</code> 和 <code>defun</code> 是不一样的，但是 PHP 连 set! 都不如</li><li>MP:  MP 不是 toString 或者 any -&gt; String， 而是 Expr -&gt; Expr 和 Expr -&gt; Q</li><li>OO: The big idea is messaging. </li></ol><h2>FP: <code>set!</code> 不能当作 <code>defun</code>  用，但是 PHP 连 set! 都不如</h2><p>eechen 说我们可以使用 <code>$func</code>来在 PHP 中实现 FP，但是这是不可行的。让我们考虑最简 单的一个 fib，我们尝试</p><div class="highlight"><pre><code class="language-text">$fib = function ($x) use ($fib) {\n  if ($x == 0) {\n    return 1;\n  }\n  return $x* call_user_func_array($fib, [$x-1]);\n};\nvar_dump($fibs(10));\n</code></pre></div><p>或者</p><div class="highlight"><pre><code class="language-text">$fib = function ($x) {\n  if ($x == 0) {\n    return 1;\n  }\n  return $x* call_user_func_array($fib, [$x-1]);\n};\nvar_dump($fibs(10));\n</code></pre></div><p>二者皆会 报错，第一个说找不到 $fib，第二个说 $fib 是没有定义的 NULL。</p><p><br></p><p>继而我们猜测这只是 PHP 解释器的一个小 bug，我们只需要把 closure 的位置在 AST 往下压 一层之后 use 就能找到了，比如</p><div class="highlight"><pre><code class="language-text">function id($x) {return $x;)\n$fib = id(function ($x) use ($fib) {\n  if ($x == 0) {\n    return 1;\n  }\n  return $x* call_user_func_array($fib, [$x-1]);\n});\nvar_dump($fibs(10));\n</code></pre></div><p>依然是找不到 <code>$fib</code>。 </p><p><br></p><p>可能这时候我们只是认为 use 之前需要声明，只是一个 php 解释器上实现的一个小 bug，比如</p><div class="highlight"><pre><code class="language-text">$fib = NULL;\n$fib = function ($x) use ($fib) {\n  if ($x == 0) {\n    return 1;\n  }\n  return $x* call_user_func_array($fib, [$x-1]);\n};\nvar_dump($fibs(10));\n</code></pre></div><p>结果是 $fib 在 closure 中对应的值 <code>NULL</code>，无法被访问。</p><p><br></p><p>这就是我们说 PHP 既不支持 函数作为第一成员又没有 scope 的原因。scope 是作用域内 symbol 和 value 的绑定。PHP 并不存在一个正常的讲上层 scope 的某个 symbol 映射放到 closure 中的方法，PHP 的所谓的 use 只是即时地在 closure 中插入一个 <code>$fib = NULL </code>，而并非是将对 $fib 的访问转移到上层 scope 的访问中。</p><p><br></p><p>简单来讲，PHP 所谓的 scope 不是 scope，而只是一个解 释求值的 barrier，你不可能访问上层 scope 的 symbol。而 php 的 closure 也不是 closure，php 的 closure 只能绑定 value 而不能绑定 symbol。</p><p><br></p><p>如果说要 强行 <code>$func</code> 来实现自指递归或者互指递归也不是不可以，那么你需要这么写</p><div class="highlight"><pre><code class="language-text">$scope = [];\n$scope[\'fib\'] = function ($x) use ($scope) {\n  if ($x == 0) {\n    return 1;\n  }\n  return $x* call_user_func_array($scope[\'fib\'], [$x-1]);\n};\n$fib = $scope[\'fib\'];\n</code></pre></div><p>或者更加规范的，默认使用的 scope 入口和 defun </p><div class="highlight"><pre><code class="language-text">function createDefun($scope) {\n   return function($fname, $definition) use ($scope) {\n       $scope[$fname] = function () use ($scope, $fname, $definition) {\n          $args = func_get_args();\n          $scope[$fname] = call_user_func_array($definition, array_merge([$scope], $args));\n       };\n   };\n};\n\n$sp = [];\n$defun = createDefun($sp);\n$defun(\'fib\', function($scope, $x) {\n  if ($x == 0) {\n    return 1;\n  }\n  return $x* call_user_func_array($scope[\'fib\'], [$x-1]);\n});\n$fib = $sp[\'fib\'];\n</code></pre></div><p>我只是觉得，「一个语言支持 FP 范式」和「一个语言需要自行实现 scope 然后就可以通过手动注入 scope 然后就可以 FP 了」应该是完全不同的两个 意思吧？</p><p><br></p><p>这也是我们说 「PHP 不是一门支持 FP 的语言」时和说「JS，Py 等等可以写 FP，但是毕竟不是一门 FP 语言」的不同。如果我们有其他语言的经验，（ 无论这语言是 Py2/Py3，JS，Perl5，还是利用 operation() 当作 function 的旧 CPP，甚至是他喵的 MatLab），我们可以看到他们访问上层 scope 中的 symbol 是自然而然的；而 PHP 我们要么自己实现一个 scope 和 defun，要么就是使用 <code>array(__NAMESPACE__ . \'\\\' . $className, $funcName)</code> 和 static 这种并非设计为 FP 的 ugly hack。所以我们可以安全地宣称，PHP 是不支持 FP 的。</p><p><br></p><p>PS：在本节末尾指出来一下， eechen 原文误以为「PHP 变量可以绑定类」，实际上 PHP 变量只能被赋值为类的 实例而不能绑定类。这种不能绑定类特性的缺乏导致了没法实现 immutable-js <code>BaseRecord = Record({...})</code> 之类的基于函数的类派生，也对实现利用 cache 来加速 immutable 变量的生成增添了很多不必要的 boilerplate code</p><p><br></p><h2>MP:  MP 不是 toString 或者 any -&gt; String， 而是 Expr -&gt; Expr 和 Expr -&gt; Q</h2><p>一个语言是否具有 MP 的能力并不是其是否有一个叫做 XXXRefection 的方法，实际上 PHP 的 reflection 系列只是一系列拿到源码的 toString；这类方法在其他语言中也是常见，比如 ES3 时代就有了 <code>Function.prototype.toString</code>这样的方法</p><div class="highlight"><pre><code class="language-text">function hasContent() {/*\n    Line 1\n    Line 2\n    Line 3\n  */}\nvar content = hasContent.toString.split(\'\\n\').slice(1, -1).join(\'\\n\')\n</code></pre></div><p>如果我说 ES3 时代就实现了 MP，我觉得我会被 JSer 打死。甚至 ES5 时代 styled-component 通过了 Tagged templates 实现了 JS 中解析运行 CSS，JSers 也没有吹什么 「JS 是一个支持了 MP」的语言（虽然 我明年准备看看能不能借用 tagged template 可以访问 js obj 的特性来实现一些简单的可访问 JS 变量的 DSL，当然这只能说能有一点 MP 技巧；和真正利用 MP 做 code gen 离得 很远）</p><p><br></p><p>MP 是利用已知代码进行 code generaation 的手段。比如 Julia 如果不想多次写 dimension 可以（免责声明：自转行后大概有一年没写 Julia 了，所以下面可能会有简单的语法错误或者漏写 global 或者 quote）</p><div class="highlight"><pre><code class="language-julia"><span class="kd">const</span> <span class="n">c</span> <span class="o">=</span> <span class="p">@</span><span class="n">cmm</span><span class="p">(</span> <span class="n">squeeze</span><span class="p">(</span><span class="n">sum</span><span class="p">(</span><span class="n">mean</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span><span class="mi">2</span><span class="p">)))</span> <span class="c">## cm stands for common math macros</span>\n</code></pre></div><p>扩展成如下代码以避免写两次 dimension</p><div class="highlight"><pre><code class="language-text">const c = squeeze(sum(mean(a,3),2)), (2,3))\n</code></pre></div><p><br></p><p>同样我们可以轻松地在处理 NaN 的时候利用 macro 来做替换</p><div class="highlight"><pre><code class="language-text">const c = @cmm( periodic(mean(x,2, isNaN=false)))\n</code></pre></div><p>替换成这样的形式，也就是我们在没有提供 isNaN 接口的时候，一定程度上可以类似用写 R 的方式处理数据</p><div class="highlight"><pre><code class="language-text">const c =  periodic(nonNaNMean(x,2))\n</code></pre></div><p><br></p><p>甚至可以模拟一下 typeclass，下面是利用 MP 将 svd, eof, 等等方法从 <code>Array{Float, 2}</code> 扩展到 <code>Array{Float64, n}</code> 的一种 macro 示例</p><div class="highlight"><pre><code class="language-text">const (eofs, pcs) = fuck2D(\n  quote\n    global SST // SST is a 3D array of lat * lon * time\n    describe(SST, 3) // 3 is the timal dimension;\n    return svd(SST)\n  end\n)\n</code></pre></div><p>这将扩展成现将 SST 转成 2D array， 然后将 分析后的 1D array 转回 2D 的方法</p><div class="highlight"><pre><code class="language-text">const (eofs, pcs) = do\n   global SST\n   SST_config_#1 = create_Dconfig({timal_dims: 3})\n   (SST2D_#1, from_1D_to_sp, from_1D_to_timal) = decompose(SST, SST_config_#1);\n   (eofs1D_#1,pc1D_#1) = svd(SST2D_#1)\n   eofs_#1 = intercept_1D(eofs1D_#1, from_1D_to_sp)\n   pcs_#1  = intercept_1D(pcs1D_#1, from_1D_to_timal)\n   return (eofs_#1, pcs_#1)\nend\n</code></pre></div><p><br></p><p>这��宏生成代码节省了大量手动写 adapter 的时间，实现了类似 type class 的效果。另外一类常用的 MP 做法是将任何一个需要埋点的函数</p><div class="highlight"><pre><code class="language-text">function func(a,b,c) {\n   ....\n     return func(a\', b\', c\')\n}\n</code></pre></div><p>这类代码转换成类似</p><div class="highlight"><pre><code class="language-text">function func_effect(f, a, b, c) {\n    ....\n      call_effect(f, a\', b\', c\')\n}\n</code></pre></div><p>这样我们可以在 call_effect 中使用统一的 effect 处理和上下文传递等等。</p><p><br></p><p>为什么我们要写这么多 PHPer 很 可能看不懂的 MP 代码呢？ 首先</p><ol><li>PHPer 看不懂 MP 但是又说 PHP 支持 MP 难道是我的错么？</li><li>这里只是展现一下为什么 MP 的实践需要 AST；在这类需求中，文 本替换然后 eval 显然是不安全而且不够灵活的。不在 AST 上 walk 一下还能怎么办呢，难道拿头锤 regex 做替换？</li></ol><p><br></p><p>一个 PHPer 可能会争论说其实这类 MP 实践在 PHP 中是可以做到的；然后他可能会举出类似于 <a href="http://link.zhihu.com/?target=https%3A//github.com/Roave/BetterReflection" class=" wrap external" target="_blank" rel="nofollow noreferrer">Roave/BetterReflection</a>这样的库；显然，在看过这种库之后，即使不懂 MP 也能发现很明显的风险：</p><ol><li>其 parser 库并非是 php 解释器自己的 parser，而是另一种 PHP 实现的 <a href="http://link.zhihu.com/?target=https%3A//github.com/nikic/PHP-Parser" class=" wrap external" target="_blank" rel="nofollow noreferrer">https://github.com/nikic/PH</a>P-Parser  ；也就是任何 PHP-Parser 和 php 解释器 parser 的不一致都会影响到结果 （而且难以 debug）</li><li>PHP 并没有 eval(Expr) 的手段，对于变换后的 AST，需要使用 PHP-Parser 来 write string，然后执行转写的 string。这不仅仅依赖于 PHP-parser 的正确性，而且任何 php 的报错都会在 eval 这一行</li><li>eval（string） 永远是危险的呀</li></ol><p><br></p><p>而且不可避免的，这样的 parser 实践还会导致所有含有副作用的语言中 MP 共同要面对的问题：副作用跟踪。考虑到我们在某个文件中元编程两次</p><div class="highlight"><pre><code class="language-text">eval(AST2String(expr1))\neval(AST2String(expr2))\n</code></pre></div><p><br></p><p>如果在 expr1 中含有了</p><div class="highlight"><pre><code class="language-text">function foo {...}\nbar_effect = ...；\n</code></pre></div><p>然后 expr2 含有了</p><div class="highlight"><pre><code class="language-text">function foo {...}\nbar_effect = ...;\n</code></pre></div><p>然后 expr1 的部分结果就有被 expr2 覆盖的风险。</p><p><br></p><p>在 Julia 中，macroexpand 直接会分析上下文并且在变量后面加上 `_#number` 这样的后缀防止覆写变量；而且很多 lisp 系语言中，eval 本身是 lexical scope 下在一个新的 scope 进行的。</p><p><br></p><p><br></p><h2>OOP：三原则或者四圣谛只是 90 年代类似 Java 语言对于 OOP 的一种实现手段而已</h2><p>本来我以为我这里不需要解释一下 extends 的问题，可以直接讨论层次复杂度和静态检查的关系。我发现我还是必须引用一下 Alan Kay 的名言 「The big idea is "messaging"」（<a href="http://link.zhihu.com/?target=http%3A//wiki.c2.com/%3FAlanKayOnMessaging" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://</span><span class="visible">wiki.c2.com/?</span><span class="invisible">AlanKayOnMessaging</span><span class="ellipsis"></span></a>）。</p><p><br></p><p>因为知乎的垃圾编辑器又开始卡了，这里就长话短说了。只要我们能够实现层次划分和父子 components 之间的 messaging 传递，那么 OOP 所需要的 divide and conquer 是自然而然的，而且会便利实现 testable module （类似于为了测试方便， database 仅仅被实现为获得值和更新值的一种特例，而非必要的 backend）。</p><p><br></p><p>而旧时代的 java 以及其所代码的三原则，实际上很容易出现两个很讨厌的事情，一者是子类对父类的副作用污染，另外一种是只要一个香蕉但是拿到了香蕉加猴子加森林。</p><p><br></p><p>当然 data class 和 sub typing 本身就是很讨厌的强行 binding 数据和方法的手段，但是如果不得不这么做了，实际上我们更常委托的方式而非 extends 的方式处理父类和子类的关系。当然，把大部分所需要的方法重新写一遍是很讨厌的 repeat yourself 行为。所以对于动态语言，我们常常依赖约定自动推导 b -&gt; f a -&gt; f b 或者 (a-&gt; b) -&gt; f a -&gt; f b 来压缩类的层次。Java 等等静态语言虽然不能使用这种方法，但是静态分析可以保证在使用工厂或者其他委托方法时候代码的正确性。</p><p><br></p><p>然后 PHP 学 Java 了，但是问题是 PHP 能够用静态分析保证委托足够复杂时的正确性，PHP 行么？没有静态分析学 java 就像猪学鸟跳出飞机一样。</p><p><br></p><h2>尾声</h2><p>我觉得对于部分 PHPer，这下面几句话不是特别过分</p><ol><li>如果你不会 FP，不懂 FP，也没写过 FP，那么就不要说别人「无脑黑 PHP 不支持 FP」</li><li>如果你不会 MP，不懂 MP，也没写过 MP，那么就不要说别人「无脑黑 PHP 不支持 MP」</li><li>如果你对 OO 的理解只停留在三原则上....算了，对于这种 ill-defined 的东西你开心就好</li><li>如果你只会 PHP，或者只会用 PHP 的方式写很多副作用满天飞的语言... 就不要讲什么「好的程序只和程序员有关，和程序语言无关」；这类编程经验不能教人「什么是好的程序」</li></ol><p>否则的话，嗯..... 算了，黑 PHP 有意思，黑 PHPer 没意思。毕竟我玩的是 programming 而不是 programmer</p><blockquote>Our civilization is decadent and our language — so the argument runs — must inevitably share in the general collapse.</blockquote>', 'commentCount': 14, 'voteupCount': 36, 'reshipmentSettings': 'allowed', 'thanksCount': 6, 'excerptNew': '首先我觉得我要针对@eechen称我「无脑黑 php」作出反驳和解释 曾经我在知道我要写 php 但是还没有写 php 之前，看到过@贺师俊曾经写过的一 些回答被一些 phper 说是 「无脑黑」 php；虽然我觉得「各种函数上的不一致」，「大小写不一致」等等很难算是无脑黑，但…', 'previewText': '', 'canComment': {'status': True, 'reason': ''}, 'type': 'answer', 'thumbnail': ''}}, 'articles': {'34693209': {'updated': 1522637772, 'author': {'isFollowed': False, 'type': 'people', 'name': '啊冒', 'headline': '前端无证驾驶 / 弃坑专业户', 'urlToken': 'jsorz', 'userType': 'people', 'vipInfo': None, 'url': 'https://api.zhihu.com/people/967af4c760af717a74c6ae2795526fb5', 'avatarUrl': 'https://pic1.zhimg.com/50/v2-b483d11c84cf07fcdd12cfd79c0fa91b_s.jpg', 'isFollowing': False, 'isOrg': False, 'gender': 1, 'badge': [], 'id': '967af4c760af717a74c6ae2795526fb5'}, 'excerpt': '首先 JavaScript 中<b>不存在多继承</b>，并且也不推荐使用继承。如果你也这么认为的话，那笔者的观点也就 写完啦 233333…. 如果还想回顾下 JavaScript 中“继承”的前世今生，以及对“多继承”的讨论，不妨慢慢看下去。<b>1. 苦苦追求的语法糖</b>在 ES6 出现以前，在还没有使用 React, Vue 等框架之前，我们在做稍复杂的前端页面和组件时，会经常用模块化的思想去封装一些可复用的逻辑，会想着给 JavaScript 提供“类”的支持，再结合一些设…', 'id': 34693209, 'voteupCount': 61, 'upvotedFollowees': [], 'created': 1522637772, 'url': 'https://api.zhihu.com/articles/34693209', 'commentPermission': 'all', 'title': 'JavaScript中的“多继承”', 'previewType': 'default', 'content': '<p>首先 JavaScript 中<b>不存在多继承</b>，并且也不推荐使用继承。如果你也这么认为的话，那笔者的观点也就写完啦 233333…. 如果还想回顾下 JavaScript 中“继承”的前世今生，以及对“多继承”的讨论，不妨慢慢看下去。</p><h2><b>1. 苦苦追求的语法糖</b></h2><p>在 ES6 出现以前，在还没有使用 React, Vue 等框架之前，我们在做稍复杂的前端页面和组件时，会经常用模块化的思想去封装一些可复用的逻辑，会想着给 JavaScript 提供“类”的支持，再结合一些设计模式，就可以做出各种灵活的代码结构。</p><p>我们知道 JavaScript 中并<b>不存在 class</b>，存在的只是<b>原型链</b>，都是通过函数和 prototype 去封装一些东西来模拟“类”。可以说任何一个函数都可以被视为一个“类”，只要你愿意。</p><p>关于 prototype 不是本文的重点，笔者一直收藏了这张图经常用来给自己复习。</p><figure><img src="https://pic4.zhimg.com/v2-e83bca5f1d1e6bf359d1f75727968c11_b.jpg" data-size="normal" data-rawwidth="520" data-rawheight="586" class="origin_image zh-lightbox-thumb" width="520" data-original="https://pic4.zhimg.com/v2-e83bca5f1d1e6bf359d1f75727968c11_r.jpg"><figcaption>【图1】JavaScript 原型链</figcaption></figure><p>那些年，我们一直在等待“类”的语法糖。。。</p><p><br></p><h2><b>1.1 模拟一个类</b></h2><p>在强类型的语言中，类是为了面向对象，就不得不提其三大特性【封装】【继 承】【多态】</p><div class="highlight"><pre><code class="language-js"><span class="kd">var</span> <span class="nx">Book</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>\n  <span class="c1">// 私有静态属性</span>\n  <span class="kd">var</span> <span class="nx">privateStaticAttribute</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>\n  <span class="c1">// 私有静态方法</span>\n  <span class="kd">var</span> <span class="nx">privateStaticMethod</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{};</span>\n  <span class="c1">// 构造函数</span>\n  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 私有属性</span>\n    <span class="kd">var</span> <span class="nx">title</span><span class="p">;</span>\n    <span class="c1">// 私有方法</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">getTitle</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">title</span><span class="p">;</span> <span class="p">};</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">setTitle</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">title</span><span class="p">)</span> <span class="p">{};</span>\n  <span class="p">}</span>\n<span class="p">})();</span>\n<span class="c1">// 公有静态方法</span>\n<span class="nx">Book</span><span class="p">.</span><span class="nx">staticMethod</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{};</span>\n<span class="c1">// 公有方 法</span>\n<span class="nx">Book</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">publicSharedMethod</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{};</span>\n</code></pre></div><p>这样的代码想必都很面熟，借鉴了强类型语言中的“类”的概念，既然是类，它除了封装一些属性和方法，还需要做到可见性的控制。由于 JavaScript 中没有<a href="http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Access_modifiers" class=" wrap external" target="_blank" rel="nofollow noreferrer">可见性修饰符</a>，只能用闭包来模拟 public 与 private。虽然比起 Java / C++ 中的类还有很多不足，但至少做到了一些封装，而且通常我们还可以建立命名规范，约定下划线开头的属性名或方法名为私有的。</p><p>有了【封装】之后，我们就 要考虑【继承】了。然而 JavaScript 也没有继承的机制，都是使用 <code>prototype</code> 去模拟，实现方式有很多，出现了各种各样的“继承”方法。原型式继承、类式继承，甚至模拟 <code>super</code> 关键字，提供 <code>Class.extend()</code>、<code>this.super()</code> 等便利的用法，都是运用闭包和 <code>prototype</code> 实现的 Syntactic sugar。这也就是过去 <a href="http://link.zhihu.com/?target=http%3A//prototypejs.org/learn/class-inheritance" class=" wrap external" target="_blank" rel="nofollow noreferrer">Prototype.js</a> 这样的库对前端产生的影响。</p><p>而至于【多态】，这是只在强类型语言中需要考虑的，当无法在编译时确定一个对象的类型时，只能在运行时确 定一个函数要从哪儿去获取。常见的应用场景是：用父类型的引用去接收子类型的对象，使用父类型中定义的函数去统一操作不同子类的对象，并且子类中可以覆盖父类中的函数。正巧 JavaScript 的弱类型特征，不存在编译时要确定类型，天然支持多态。</p><p><br></p><h2><b>1.2 到了ES5后</b></h2><p>ES5 有了 <code>Object.create()</code>，让我们更便捷地使用原型继承，<code>Object.getPrototypeOf</code>、<code>Object.setPrototypeOf</code> 可以更自由地操控原型链。</p><div class="highlight"><pre><code class="language-js"><span class="kd">var</span> <span class="nx">Book</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">title</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">\'title\'</span><span class="p">,</span> <span class="p">{</span>\n    <span class="nx">writable</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>\n    <span class="nx">value</span><span class="o">:</span> <span class="nx">title</span>\n  <span class="p">});</span>\n<span class="p">};</span>\n<span class="nx">Book</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getTitle</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">title</span><span class="p">;</span> <span class="p">};</span>\n\n<span class="kd">var</span> <span class="nx">EBook</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">link</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">\'link\'</span><span class="p">,</span> <span class="p">{</span>\n    <span class="nx">writable</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>\n    <span class="nx">value</span><span class="o">:</span> <span class="nx">link</span>\n  <span class="p">});</span>\n<span class="p">};</span>\n<span class="nx">EBook</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Book</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="p">{</span>\n  <span class="nx">download</span><span class="o">:</span> <span class="p">{</span>\n    <span class="nx">writable</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>\n    <span class="nx">value</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">\'Start...\'</span><span class="p">);</span> <span class="p">}</span>\n  <span class="p">}</span>\n<span class="p">});</span>\n<span class="c1">// 一定要修正 constructor</span>\n<span class="nx">EBook</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">EBook</span><span class="p">;</span>\n\n<span class="c1">// testing</span>\n<span class="kd">var</span> <span class="nx">jsorz</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EBook</span><span class="p">(</span><span class="s1">\'https://zhuanlan.zhihu.com/ElemeFE\'</span><span class="p">);</span>\n<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">jsorz</span> <span class="k">instanceof</span> <span class="nx">Book</span><span class="p">);</span>\n<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">jsorz</span> <span class="k">instanceof</span> <span class="nx">EBook</span><span class="p">);</span>\n<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">jsorz</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">===</span> <span class="nx">EBook</span><span class="p">);</span>\n<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">jsorz</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">\'getTitle\'</span><span class="p">)</span> <span class="o">===</span> <span class="kc">false</span><span class="p">);</span>\n<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">jsorz</span><span class="p">)</span> <span class="o">===</span> <span class="nx">EBook</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>\n<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">jsorz</span><span class="p">).</span><span class="nx">constructor</span> <span class="o">===</span> <span class="nx">EBook</span><span class="p">);</span>\n</code></pre></div><p>注：<code>Object.getPrototypeOf</code> 返回的即【图1】中 <code>__proto__</code> 的指向。</p><p><br></p><h2><b>1.3 ES6中的继承</b></h2><p>在 ES2015 中有了 <code>class</code> 语法糖，有了 <code>extends</code>、<code>super</code>、<code>static</code> 这样的关键字，更像强类型语言中的“类”了。</p><div class="highlight"><pre><code class="language-js"><span class="kr">class</span> <span class="nx">Book</span> <span class="p">{</span>\n  <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">_title</span> <span class="o">=</span> <span class="nx">props</span><span class="p">.</span><span class="nx">title</span><span class="p">;</span>\n  <span class="p">}</span>\n  <span class="nx">get</span> <span class="nx">title</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_title</span><span class="p">;</span> <span class="p">}</span>\n  <span class="kr">static</span> <span class="nx">staticMethod</span><span class="p">()</span> <span class="p">{}</span>\n  <span class="nx">toString</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="err">`</span><span class="nx">Book_$</span><span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">_title</span> <span class="p">}</span><span class="err">`</span><span class="p">;</span> <span class="p">}</span>\n<span class="p">}</span>\n\n<span class="kr">class</span> <span class="nx">EBook</span> <span class="kr">extends</span> <span class="nx">Book</span> <span class="p">{</span>\n  <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>\n    <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">_link</span> <span class="o">=</span> <span class="nx">props</span><span class="p">.</span><span class="nx">link</span><span class="p">;</span>\n  <span class="p">}</span>\n  <span class="nx">set</span> <span class="nx">link</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">_link</span> <span class="o">=</span> <span class="nx">val</span><span class="p">;</span> <span class="p">}</span>\n  <span class="nx">toString</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="err">`</span><span class="nx">Book_$</span><span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">_link</span> <span class="p">}</span><span class="err">`</span><span class="p">;</span> <span class="p">}</span>\n<span class="p">}</span>\n</code></pre></div><p>上面的语法确实清晰简单了，我们再看下编译成ES5后的代码是怎 样的~</p><div class="highlight"><pre><code class="language-js"><span class="kd">var</span> <span class="nx">Book</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>\n  <span class="kd">function</span> <span class="nx">Book</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">_classCallCheck</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">Book</span><span class="p">);</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">_title</span> <span class="o">=</span> <span class="nx">props</span><span class="p">.</span><span class="nx">title</span><span class="p">;</span>\n  <span class="p">}</span>\n  <span class="nx">_createClass</span><span class="p">(</span><span class="nx">Book</span><span class="p">,</span> <span class="p">[{</span>\n    <span class="nx">key</span><span class="o">:</span> <span class="s2">"toString"</span><span class="p">,</span>\n    <span class="c1">// 省略...</span>\n  <span class="p">},</span> <span class="p">{</span>\n    <span class="nx">key</span><span class="o">:</span> <span class="s2">"title"</span><span class="p">,</span>\n    <span class="c1">// 省略...</span>\n  <span class="p">}],</span> <span class="p">[{</span>\n    <span class="nx">key</span><span class="o">:</span> <span class="s2">"staticMethod"</span><span class="p">,</span>\n    <span class="c1">// 省略...</span>\n  <span class="p">}]);</span>\n  <span class="k">return</span> <span class="nx">Book</span><span class="p">;</span>\n<span class="p">}();</span>\n\n<span class="kd">var</span> <span class="nx">EBook</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">_Book</span><span class="p">)</span> <span class="p">{</span>\n  <span class="kd">function</span> <span class="nx">EBook</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// 省略...</span>\n  <span class="p">}</span>\n  <span class="nx">_inherits</span><span class="p">(</span><span class="nx">EBook</span><span class="p">,</span> <span class="nx">_Book</span><span class="p">);</span>\n  <span class="nx">_createClass</span><span class="p">(</span><span class="nx">EBook</span><span class="p">,</span> <span class="p">[{</span>\n    <span class="nx">key</span><span class="o">:</span> <span class="s2">"toString"</span><span class="p">,</span>\n    <span class="c1">// 省略...</span>\n  <span class="p">},</span> <span class="p">{</span>\n    <span class="nx">key</span><span class="o">:</span> <span class="s2">"link"</span><span class="p">,</span>\n    <span class="c1">// 省略...</span>\n  <span class="p">}]);</span>\n  <span class="k">return</span> <span class="nx">EBook</span><span class="p">;</span>\n<span class="p">}(</span><span class="nx">Book</span><span class="p">);</span>\n</code></pre></div><p>示例生成的代码可以用 <a href="http://link.zhihu.com/?target=https%3A//babeljs.io/repl/%23%3Fbabili%3Dfalse%26browsers%3D%26build%3D%26builtIns%3Dfalse%26code_lz%3DMYGwhgzhAEBCD28DW0DeAoa1jwHYQBcAnAV2APiIAoAHI-GiASjUy2gIAsBLCAOgD6BbgRABTaAF5odBv2GixAbjYBfdGwDmYghxHiqLVNCI6SRXBx78h-5dHVtCYYcGjPXAWR2d4AE0M0RywKAGViblxNQONTAnNLAAMEZAEAEmMuXkEFcQdEpQd0R1BIGABRFJQxAA8CMVw_GCrWLBx8YjIKallGIzYsCBIaMR76PpV2K2yBEEiUaV7-OdwkSaKnHWgVpCoANzAQI2mbHaloA5BC4I54cKJI6OO4hOhkxCR0zOtBM9UCoqqIA%26debug%3Dfalse%26forceAllTransforms%3Dfalse%26shippedProposals%3Dfalse%26circleciRepo%3D%26evaluate%3Dfalse%26fileSize%3Dfalse%26lineWrap%3Dtrue%26presets%3Des2015%252Cstage-3%26prettier%3Dfalse%26targets%3D%26version%3D6.26.0%26envVersion%3D" class=" wrap external" target="_blank" rel="nofollow noreferrer">Babel REPL</a> 查看，可以看到 ES6 提供的 <code>class</code> 语法真的是 Syntactic sugar，本质上与我们用 ES5 甚至更早时模拟的“类”与“继承”如出一辙。</p><p><br></p><h2><b>1.4 小结</b></h2><p>JavaScript 很容易模拟一个“类”，并且可以一定程度上做到面向对象中的三大特性：封装、继承、多态。从最初去模拟一个“类”，到 ES5 提供更便捷的原型操控API，到 ES6 中提供更多“类”相关的关键字，都是在 帮我们减小 JavaScript 中面向对象的使用成本。</p><p>虽然 JavaScript 中的“继承”并不是真正的继承，“类”也不是真正的“类”，相比 Java 肯定还有很多实现不了的地方， 比如 abstract class、Interface 等，只能通过一些 tricky 的办法去模拟。因此 JavaScript 中所谓的“继承”，是为了方便程序员用面向对象的方式来组织代码。</p><p><br></p><h2><b>2. 试试多继承</b></h2><p>贪心是人之常情，有了“继承”后，我们就会想要“多继承”。即使在后端语言中，也没有几个语言能真正实现多继承，笔者只知道 C++ 和 python 提供了多继承的语法，而像 Java 只允许继承一个父类，但可以同时 <code>implements</code> 多个接口类，也算一种变相的多继承吧。</p><p><br></p><h2><b>2.1 多继承要考虑的问题</b></h2><p>多继承并没有想象的那么美好，首先是对 <code>instanceof</code> 提出了更高的要求</p><div class="highlight"><pre><code class="language-js"><span class="kr">class</span> <span class="nx">A</span> <span class="p">{}</span>\n<span class="kr">class</span> <span class="nx">B</span> <span class="p">{}</span>\n<span class="c1">// 假定有支持多继承的语法</span>\n<span class="kr">class</span> <span class="nx">C</span> <span class="kr">extends</span> <span class="nx">A</span><span class="p">,</span> <span class="nx">B</span> <span class="p">{}</span>\n<span class="c1">// 那么 C 的实例对象，应该同时也是 A 和 B 的 instance</span>\n<span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">C</span><span class="p">()</span>\n<span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">C</span>  <span class="c1">// true</span>\n<span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">A</span>  <span class="c1">// true</span>\n<span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">B</span>  <span class="c1">// true</span>\n</code></pre></div><p>如上示例，在多继承中必须将所有的父类标识记录在子类中，才能让 <code>instanceof</code> 实现上面的效果。而 JavaScript 中 只有 <code>prototype</code> 链，该死的还约束了一个对象只能指定一个 <code>prototype</code>，所以还得另外想办法去模拟 <code>instanceof</code> </p><p>这还不算啥，请 看下一张图</p><figure><img src="https://pic4.zhimg.com/v2-88605ca18e26a4247eb0a3841fdbc0ba_b.jpg" data-size="normal" data-rawwidth="314" data-rawheight="358" class="content_image" width="314"><figcaption>【图2】Diamond Problem</figcaption></figure><p>这是多继承中典型的问题，称为 Diamond Problem，当 A, B, C 中都定义了一个相同名称的函数时，而在 D 的实例对象中调用这个函数时，究竟应该去执行谁。。。</p><p><br></p><h2><b>2.2 间接多继承</b></h2><p>先退而求其次，我们借鉴了 Java 中的思路， 实际只继承一个类，通过其他方式将其他类的功能融入。Java 中可以用 <code>Interface</code> 约束一个类应该拥有的行为，当然 JavaScript 也可以这么做，实现 interface 的语法糖，检查“类”中有没有重写 interface 中的所有函数。但这样的话，interface 除了做校验之用，没有实际意义，不如直接 mixin 的方式来的实在。</p><div class="highlight"><pre><code class="language-js"><span class="kr">const</span> <span class="nx">mixinClass</span> <span class="o">=</span> <span class="p">(</span><span class="nx">base</span><span class="p">,</span> <span class="p">...</span><span class="nx">mixins</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="kr">const</span> <span class="nx">mixinProps</span> <span class="o">=</span> <span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">source</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyNames</span><span class="p">(</span><span class="nx">source</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">prop</span> <span class="o">=&gt;</span> <span class="p">{</span>\n      <span class="k">if</span> <span class="p">(</span><span class="sr">/^constructor$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">prop</span><span class="p">))</span> <span class="p">{</span> <span class="k">return</span><span class="p">;</span> <span class="p">}</span>\n      <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">prop</span><span class="p">,</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">source</span><span class="p">,</span> <span class="nx">prop</span><span class="p">));</span>\n    <span class="p">})</span>\n  <span class="p">};</span>\n\n  <span class="kd">let</span> <span class="nx">Ctor</span><span class="p">;</span>\n  <span class="k">if</span> <span class="p">(</span><span class="nx">base</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">base</span> <span class="o">===</span> <span class="s1">\'function\'</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">Ctor</span> <span class="o">=</span> <span class="kr">class</span> <span class="kr">extends</span> <span class="nx">base</span> <span class="p">{</span>\n      <span class="nx">constructor</span><span class="p">(...</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>\n        <span class="kr">super</span><span class="p">(...</span><span class="nx">props</span><span class="p">);</span>\n      <span class="p">}</span>\n    <span class="p">};</span>\n    <span class="nx">mixins</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">source</span> <span class="o">=&gt;</span> <span class="p">{</span>\n      <span class="nx">mixinProps</span><span class="p">(</span><span class="nx">Ctor</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="nx">source</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>\n    <span class="p">});</span>\n  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>\n    <span class="nx">Ctor</span> <span class="o">=</span> <span class="kr">class</span> <span class="p">{};</span>\n  <span class="p">}</span>\n  <span class="k">return</span> <span class="nx">Ctor</span><span class="p">;</span>\n<span class="p">};</span>\n\n<span class="kr">class</span> <span class="nx">A</span> <span class="p">{</span>\n  <span class="nx">methodA</span><span class="p">()</span> <span class="p">{}</span>\n<span class="p">}</span>\n<span class="kr">class</span> <span class="nx">B</span> <span class="p">{</span>\n  <span class="nx">methodB</span><span class="p">()</span> <span class="p">{}</span>\n<span class="p">}</span>\n<span class="kr">class</span> <span class="nx">C</span> <span class="kr">extends</span> <span class="nx">mixinClass</span><span class="p">(</span><span class="nx">A</span><span class="p">,</span> <span class="nx">B</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nx">methodA</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">\'methodA in C\'</span><span class="p">);</span> <span class="p">}</span>\n  <span class="nx">methodC</span><span class="p">()</span> <span class="p">{}</span>\n<span class="p">}</span>\n\n<span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">C</span><span class="p">();</span>\n<span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">C</span>  <span class="c1">// true</span>\n<span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">A</span>  <span class="c1">// true</span>\n<span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">B</span>  <span class="c1">// false</span>\n</code></pre></div><p>这样就简单模拟了间接多继承，通过构造一个中间类，让中间 类直接继承 A，并且 mixin 了 B 的原型成员，然后再让 C 去继承这个中间类。由于 B 是通过 mixin 方式浅拷贝了一份，<code>B.prototype</code> 并不在 C 的原型链上（<code>C.__proto__.__proto__</code>），所以 <code>c instanceof B</code> 为 false。</p><p>要想修正 <code>instanceof</code>，只能自己另外实现一套 <code>isInstanceOf()</code> 的逻辑，在继承时将所有的父类引用记录下来，再去比对。</p><p><br></p><h2><b>2.3 MRO算法</b></h2><p>针对多继承考虑的第2个问题，前面提到的 Diamond Problem，需要引入一个定义。</p><p>Method Resolution Order (MRO) 指的是在继承结构中确定类的线性顺序，例如 <code>C =&gt; B =&gt; A</code> 表示 C 继承 B，B 继承 A，那么 C 的 MRO 就是 <code>C B A</code>，也就意味着当调用 C 实例中的一个函数时，会按照 <code>C B A</code> 的优先级顺序去“寻找”该函数。在单继承的结构中自然没有问题，而在多继承中 MRO 发挥着其作用。</p><p>常用的<a href="http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/C3_linearization" class=" wrap external" target="_blank" rel="nofollow noreferrer">C3算法</a>就是用来计算 MRO，在 python 文档中有对其的完整描述，这里用一个例子简述下算法流程。</p><p>假设现在有这样的多继承结构</p><figure><img src="https://pic4.zhimg.com/v2-d4f83c6c667c465431288cdc1175174c_b.jpg" data-size="normal" data-rawwidth="314" data-rawheight="453" class="content_image" width="314"><figcaption>【图3】多继承示例结构</figcaption></figure><p>首先引入类的线性顺序的表示方法，在上图中可以看到 <code>B =&gt; Y =&gt; O</code> 这一部分是单继承的结 构，显然 B 的 MRO 为 <code>B Y O</code>，记为 <code>L(B) = BYO</code> </p><p>然后还要引入几个符号，在 MRO 的线性顺序中，用 head 表示第一个元素，用 tail 表示余下部分。例如，<code>B Y O</code> 中的 head 就是 <code>B</code>，tail 则是 <code>Y O</code>。MRO 中只有一个元素，如【图3】中的 <code>O</code> 元素，head 为<code>O</code>，tail 则是空。</p><p>接下来是最关键的，图中 A 的 MRO 记为 <code>L(A(X, Y))</code>，<code>A(X, Y)</code> 表示 A 同时继承了 X 和 Y，那么</p><blockquote>L(A(X, Y)) = A + merge(L(X), L(Y), XY)</blockquote><p>其中 merge 的规则如下</p><div class="highlight"><pre><code class="language-text">取出第一个序列的 head\n如果，该 head 不在其它序列的 tail 中\n     则把这个 head 添加到结果中并从所有的序列中移除它\n否则，用下一个序列的 head 重复上一步\n直到所有序列中的所有元素都被移除（或者无法找到一个符合的head）\n</code></pre></div><p>最后我们来计算下图3中各个类的线性顺序</p><div class="highlight"><pre><code class="language-text">L(O) = O\nL(X) = X + L(O) = XO\nL(Y) = Y + L(O) = YO\nL(A) = A + merge(L(X), L(Y), XY)\n     = A + merge(XO, YO, XY)\n     = AX + merge(O, YO, Y)\n     = AXY + merge(O, O)\n     = AXYO\nL(B) = B + L(Y) = BYO\nL(C) = C + merge(L(A), L(B), AB)\n     = C + merge(AXYO, BYO, AB)\n     = CA + merge(XYO, BYO, B)\n     = CAX + merge(YO, BYO, B)\n     = CAXB + merge(YO, YO)\n     = CAXBYO\n</code></pre></div><p>上述多继承结构的 python 示例可参见 <a href="http://link.zhihu.com/?target=https%3A//glot.io/snippets/ez5bqslav2" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">glot.io/snippets/ez5bqs</span><span class="invisible">lav2</span><span class="ellipsis"></span></a> 输出了 C 这个类的 MRO 即 <code>C A X B Y O</code> </p><p>当然C3算法也有 bad case，会导致上述 的 merge 在中途失败，也就是无法求出 MRO 的 case。关于 MRO 的更多细节可参考 <a href="http://link.zhihu.com/?target=https%3A//www.python.org/download/releases/2.3/mro/" class=" wrap external" target="_blank" rel="nofollow noreferrer">The Python 2.3 Method Resolution Order</a>  总之不推荐设计出过于复杂的多继承结构 =_=</p><p><br></p><h2><b>2.4 模拟多继承</b></h2><p>有了上面的基础后，我们来模拟实现下多继承：</p><ul><li>为每个“类”提供独立的 <code>isInstanceOf()</code> 函数以解决 <code>instanceof</code> 的问题</li><li>同时引入 Method Resolution Order (MRO) 的C3算法，将每个“类”的 MRO 线性序列存入 meta 数据中</li><li>将多继承中的第一个父类，使用原型链的方式继承，而剩下的父类则使用 mixin 的方式</li></ul><div class="highlight"><pre><code class="language-js"><span class="kr">const</span> <span class="nx">mixinProps</span> <span class="o">=</span> <span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">source</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyNames</span><span class="p">(</span><span class="nx">source</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">prop</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="k">if</span> <span class="p">(</span><span class="sr">/^(?:constructor|isInstanceOf)$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">prop</span><span class="p">))</span> <span class="p">{</span> <span class="k">return</span><span class="p">;</span> <span class="p">}</span>\n    <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">prop</span><span class="p">,</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">source</span><span class="p">,</span> <span class="nx">prop</span><span class="p">));</span>\n  <span class="p">})</span>\n<span class="p">};</span>\n\n<span class="kr">const</span> <span class="nx">mroMerge</span> <span class="o">=</span> <span class="p">(</span><span class="nx">list</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">list</span> <span class="o">||</span> <span class="o">!</span><span class="nx">list</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="p">[];</span>\n  <span class="p">}</span>\n  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">items</span> <span class="nx">of</span> <span class="nx">list</span><span class="p">)</span> <span class="p">{</span>\n    <span class="kd">let</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">items</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>\n    <span class="kd">let</span> <span class="nx">valid</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>\n    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">items2</span> <span class="nx">of</span> <span class="nx">list</span><span class="p">)</span> <span class="p">{</span>\n      <span class="k">if</span> <span class="p">(</span><span class="nx">items2</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>\n        <span class="nx">valid</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>\n        <span class="k">break</span><span class="p">;</span>\n      <span class="p">}</span>\n    <span class="p">}</span>\n\n    <span class="k">if</span> <span class="p">(</span><span class="nx">valid</span><span class="p">)</span> <span class="p">{</span>\n      <span class="kd">let</span> <span class="nx">nextList</span> <span class="o">=</span> <span class="p">[];</span>\n      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">items3</span> <span class="nx">of</span> <span class="nx">list</span><span class="p">)</span> <span class="p">{</span>\n        <span class="kd">let</span> <span class="nx">_index</span> <span class="o">=</span> <span class="nx">items3</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>\n        <span class="k">if</span> <span class="p">(</span><span class="nx">_index</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>\n          <span class="nx">items3</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">_index</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>\n        <span class="p">}</span>\n        <span class="nx">items3</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;&amp;</span> <span class="nx">nextList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">items3</span><span class="p">);</span>\n      <span class="p">}</span>\n      <span class="k">return</span> <span class="p">[</span><span class="nx">item</span><span class="p">,</span> <span class="p">...</span><span class="nx">mroMerge</span><span class="p">(</span><span class="nx">nextList</span><span class="p">)];</span>\n    <span class="p">}</span>\n  <span class="p">}</span>\n  <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">\'Unable to merge MRO\'</span><span class="p">);</span>\n<span class="p">};</span>\n\n<span class="kr">const</span> <span class="nx">c3mro</span> <span class="o">=</span> <span class="p">(</span><span class="nx">ctor</span><span class="p">,</span> <span class="nx">bases</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">bases</span> <span class="o">||</span> <span class="o">!</span><span class="nx">bases</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>\n    <span class="k">return</span> <span class="p">[</span><span class="nx">ctor</span><span class="p">];</span>\n  <span class="p">}</span>\n  <span class="kd">let</span> <span class="nx">list</span> <span class="o">=</span> <span class="nx">bases</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">b</span> <span class="o">=&gt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">_meta</span><span class="p">.</span><span class="nx">bases</span><span class="p">.</span><span class="nx">slice</span><span class="p">());</span>\n  <span class="nx">list</span> <span class="o">=</span> <span class="nx">list</span><span class="p">.</span><span class="nx">concat</span><span class="p">([</span><span class="nx">bases</span><span class="p">]);</span>\n  <span class="kd">let</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">mroMerge</span><span class="p">(</span><span class="nx">list</span><span class="p">);</span>\n  <span class="k">return</span> <span class="p">[</span><span class="nx">ctor</span><span class="p">,</span> <span class="p">...</span><span class="nx">res</span><span class="p">];</span>\n<span class="p">};</span>\n\n<span class="kr">const</span> <span class="nx">createClass</span> <span class="o">=</span> <span class="p">(</span><span class="nx">parents</span><span class="p">,</span> <span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>\n  <span class="kr">const</span> <span class="nx">isMulti</span> <span class="o">=</span> <span class="nx">parents</span> <span class="o">&amp;&amp;</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">parents</span><span class="p">);</span>\n  <span class="kr">const</span> <span class="nx">superCls</span> <span class="o">=</span> <span class="nx">isMulti</span> <span class="o">?</span> <span class="nx">parents</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">:</span> <span class="nx">parents</span><span class="p">;</span>\n  <span class="kr">const</span> <span class="nx">mixins</span> <span class="o">=</span> <span class="nx">isMulti</span> <span class="o">?</span> <span class="nx">parents</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">:</span> <span class="p">[];</span>\n\n  <span class="kr">const</span> <span class="nx">Ctor</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>\n    <span class="c1">// TODO: call each parent\'s constructor</span>\n    <span class="k">if</span> <span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">constructor</span><span class="p">)</span> <span class="p">{</span>\n      <span class="nx">props</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>\n    <span class="p">}</span>\n  <span class="p">};</span>\n\n  <span class="c1">// save c3mro into _meta</span>\n  <span class="kd">let</span> <span class="nx">bases</span> <span class="o">=</span> <span class="p">[</span><span class="nx">superCls</span><span class="p">,</span> <span class="p">...</span><span class="nx">mixins</span><span class="p">].</span><span class="nx">filter</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="o">!!</span><span class="nx">item</span><span class="p">);</span>\n  <span class="nx">Ctor</span><span class="p">.</span><span class="nx">_meta</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">bases</span><span class="o">:</span> <span class="nx">c3mro</span><span class="p">(</span><span class="nx">Ctor</span><span class="p">,</span> <span class="nx">bases</span><span class="p">)</span> <span class="p">};</span>\n\n  <span class="c1">// inherit first parent through proto chain</span>\n  <span class="k">if</span> <span class="p">(</span><span class="nx">superCls</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">superCls</span> <span class="o">===</span> <span class="s1">\'function\'</span><span class="p">)</span> <span class="p">{</span>\n    <span class="nx">Ctor</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">superCls</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>\n    <span class="nx">Ctor</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">Ctor</span><span class="p">;</span>\n  <span class="p">}</span>\n\n  <span class="c1">// mix other parents into prototype according to [Method Resolution Order]</span>\n  <span class="c1">// NOTE: Ctor._meta.bases[0] always stands for the Ctor itself</span>\n  <span class="k">if</span> <span class="p">(</span><span class="nx">Ctor</span><span class="p">.</span><span class="nx">_meta</span><span class="p">.</span><span class="nx">bases</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>\n    <span class="kd">let</span> <span class="nx">providers</span> <span class="o">=</span> <span class="nx">Ctor</span><span class="p">.</span><span class="nx">_meta</span><span class="p">.</span><span class="nx">bases</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">reverse</span><span class="p">();</span>\n    <span class="nx">providers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">provider</span> <span class="o">=&gt;</span> <span class="p">{</span>\n      <span class="c1">// TODO: prototype of superCls is already inherited by __proto__ chain</span>\n      <span class="p">(</span><span class="nx">provider</span> <span class="o">!==</span> <span class="nx">superCls</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">mixinProps</span><span class="p">(</span><span class="nx">Ctor</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="nx">provider</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>\n    <span class="p">});</span>\n  <span class="p">}</span>\n  <span class="nx">mixinProps</span><span class="p">(</span><span class="nx">Ctor</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="nx">props</span><span class="p">);</span>\n\n  <span class="nx">Ctor</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">isInstanceOf</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">cls</span><span class="p">)</span> <span class="p">{</span>\n    <span class="kd">let</span> <span class="nx">bases</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">_meta</span><span class="p">.</span><span class="nx">bases</span><span class="p">;</span>\n    <span class="k">return</span> <span class="nx">bases</span><span class="p">.</span><span class="nx">some</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="nx">item</span> <span class="o">===</span> <span class="nx">cls</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="k">this</span> <span class="k">instanceof</span> <span class="nx">cls</span><span class="p">);</span>\n  <span class="p">}</span>\n  <span class="k">return</span> <span class="nx">Ctor</span><span class="p">;</span>\n<span class="p">};</span>\n</code></pre></div><p>接着来测试一下如 【图3】中的多继承结构</p><div class="highlight"><pre><code class="language-js"><span class="kr">const</span> <span class="nx">O</span> <span class="o">=</span> <span class="nx">createClass</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">{});</span>\n<span class="kr">const</span> <span class="nx">X</span> <span class="o">=</span> <span class="nx">createClass</span><span class="p">([</span><span class="nx">O</span><span class="p">],</span> <span class="p">{});</span>\n<span class="kr">const</span> <span class="nx">Y</span> <span class="o">=</span> <span class="nx">createClass</span><span class="p">([</span><span class="nx">O</span><span class="p">],</span> <span class="p">{</span>\n  <span class="nx">methodY</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s1">\'Y\'</span><span class="p">;</span> <span class="p">}</span>\n<span class="p">});</span>\n<span class="kr">const</span> <span class="nx">A</span> <span class="o">=</span> <span class="nx">createClass</span><span class="p">([</span><span class="nx">X</span><span class="p">,</span> <span class="nx">Y</span><span class="p">],</span> <span class="p">{</span>\n  <span class="nx">testName</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s1">\'A\'</span><span class="p">;</span> <span class="p">}</span>\n<span class="p">});</span>\n<span class="kr">const</span> <span class="nx">B</span> <span class="o">=</span> <span class="nx">createClass</span><span class="p">([</span><span class="nx">Y</span><span class="p">],</span> <span class="p">{</span>\n  <span class="nx">testName</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s1">\'B\'</span><span class="p">;</span> <span class="p">}</span>\n<span class="p">});</span>\n<span class="kr">const</span> <span class="nx">C</span> <span class="o">=</span> <span class="nx">createClass</span><span class="p">([</span><span class="nx">A</span><span class="p">,</span> <span class="nx">B</span><span class="p">],</span> <span class="p">{</span>\n  <span class="nx">constructor</span><span class="p">()</span> <span class="p">{</span>\n    <span class="k">this</span><span class="p">.</span><span class="nx">_name</span> <span class="o">=</span> <span class="s1">\'custom C\'</span><span class="p">;</span>\n  <span class="p">}</span>\n<span class="p">});</span>\n\n<span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">C</span><span class="p">();</span>\n<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">isInstanceOf</span><span class="p">(</span><span class="nx">O</span><span class="p">));</span> <span class="c1">// true</span>\n<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">isInstanceOf</span><span class="p">(</span><span class="nx">X</span><span class="p">));</span> <span class="c1">// true</span>\n<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">isInstanceOf</span><span class="p">(</span><span class="nx">Y</span><span class="p">));</span> <span class="c1">// true</span>\n<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">isInstanceOf</span><span class="p">(</span><span class="nx">A</span><span class="p">));</span> <span class="c1">// true</span>\n<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">isInstanceOf</span><span class="p">(</span><span class="nx">B</span><span class="p">));</span> <span class="c1">// true</span>\n<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">isInstanceOf</span><span class="p">(</span><span class="nx">C</span><span class="p">));</span> <span class="c1">// true</span>\n<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">testName</span><span class="p">());</span>\n<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">methodY</span><span class="p">());</span>\n</code></pre></div><p>以上代码仅供学习，还有很多不足，比如构造函数中只能调用自身的 <code>constructor</code> 函数，无法调用父类的<code>constructor</code>。这是由于 JavaScript 限制了无法通过 <code>XX.prototype.constructor.apply()</code> 的方式调用其他类的构造函数（<code>constructor</code> 只能在 <code>new</code> 的时候被调用）。想绕开这个问题的话，只能换个函数名，叫 initializtion、init 之类的名字都行。</p><p><a href="http://link.zhihu.com/?target=https%3A//glot.io/snippets/ez7tm0d4up" class=" wrap external" target="_blank" rel="nofollow noreferrer">demo 代码在这里</a>，多改变下参数试试，尝试理解前面所说的 C3 MRO  算法。</p><p><br></p><h2><b>2.5 存在的问题</b></h2><p>上面的代码，为了模拟多继承，只将第一个父类放入了子类的原型链中，而其他父类只能通过 mixin 的方式将其 prototype 中的属性拷贝到子类的 prototype 中。这受限于 JavaScript 原型链的机制，即【图1】中 <code>__proto__</code> 只能指向一个目标。所以既然这样实现的，肯定是与真正的多继承相悖的，像 C++ 中有<a href="http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Virtual_method_table" class=" wrap external" target="_blank" rel="nofollow noreferrer">虚函数表</a>的机制，在多继承中调用函数时，会去查表找出真正的函数地址。而我们模拟出的 JavaScript 多继承，是将所有父类中的函数都揉到了一个 prototype 中（<i>只不过按照 MRO 优先级顺序来依次揉入</i>）。</p><p>仔细看上面代码的话会发现，<code>c.testName()</code> 输出的与 Method Resolution Order 中所述的算法不符。在那一节中，我们知道 C 的 MRO 应该为 <code>C A X B Y O</code>，示例代码中按理来说应该优先调用 A 中的 <code>testName()</code> 函数，实际却输出了“B”……卧槽，这代码有毒的吧？？</p><div class="highlight"><pre><code class="language-js"><span class="c1">// inherit first parent through proto chain</span>\n<span class="k">if</span> <span class="p">(</span><span class="nx">superCls</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">superCls</span> <span class="o">===</span> <span class="s1">\'function\'</span><span class="p">)</span> <span class="p">{</span>\n  <span class="nx">Ctor</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">superCls</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>\n  <span class="nx">Ctor</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">Ctor</span><span class="p">;</span>\n<span class="p">}</span>\n<span class="c1">// mix other parents into prototype according to [Method Resolution Order]</span>\n<span class="c1">// NOTE: Ctor._meta.bases[0] always stands for the Ctor itself</span>\n<span class="k">if</span> <span class="p">(</span><span class="nx">Ctor</span><span class="p">.</span><span class="nx">_meta</span><span class="p">.</span><span class="nx">bases</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>\n  <span class="kd">let</span> <span class="nx">providers</span> <span class="o">=</span> <span class="nx">Ctor</span><span class="p">.</span><span class="nx">_meta</span><span class="p">.</span><span class="nx">bases</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">reverse</span><span class="p">();</span>\n  <span class="nx">providers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">provider</span> <span class="o">=&gt;</span> <span class="p">{</span>\n    <span class="c1">// TODO: prototype of superCls is already inherited by __proto__ chain</span>\n    <span class="p">(</span><span class="nx">provider</span> <span class="o">!==</span> <span class="nx">superCls</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">mixinProps</span><span class="p">(</span><span class="nx">Ctor</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="nx">provider</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>\n  <span class="p">});</span>\n<span class="p">}</span>\n</code></pre></div><p>注意代码里有句 <code>(provider !== superCls)</code> 的过滤，你可以把它去了再试下 demo。。</p><p>笔者这里也纠 结，因为 <code>superCls</code> 是第一个父类，已经在原型链上继承了，而在根据 MRO 顺序 mixin 其他父类时，按理应该将第一个父类过滤掉。然而一旦加上了 <code>(provider !== superCls)</code> 条件后，其他父类 prototype 上的属性都被拷贝到了 <code>Ctor.prototype</code> 上，而第一个父类中的原型却在 Ctor 的原型链上，显然 <code>Ctor.prototype</code> 上的函数优先级更高。</p><p>那我们将这个条件干掉！然而仍有 bad case。。 因为它将所有父类中的 prototype 都拷贝到了自己身上（<i>它明明不应该有的</i>） ，而当别人再继承它时，别人会误以为它定义了那么多函数，也会出现函数覆盖时的顺序与 MRO 计算出的顺序不一致的问题。</p><p>归根到底还是“没有查函数表”的锅！或者我们在使用方式上做强约束，多继承中的所有函数调用都必须经过统一的形如 <code>invoke(methodName, args)</code> 的接口，在 invoke 时根据 MRO 的优先级顺序，依次查找有无 <code>methodName</code> 的函数，再执行真正调用。</p><p><br></p><h2><b>3. 为什么不建议继承</b></h2><p>说了那么多，笔者的体会是<b>不要想着继承</b>，<b>不要想着继承</b>，<b>不要想着继承</b>。。。</p><p>JavaScript 本身就不是面向对象的语言，干嘛要让它做它不擅长的事情 =_= 虽然语法糖已经提供了“类”的支持，那是照顾有面向对象想法的人，但它本质上不同于其他语言中的继承。不要把他人的宽容当作放任的理由，能模拟继承就不错了，就别再惦记“多继承”了。</p><p>再回过头来想一想，我们为什么需要继承？继承是 一种强耦合关系，到底是否有必要用继承，可以考虑下在应用场景中是否需要用父类型去接收子类型的实例，即子类向父类的向上转型。在 JavaScript 中不会出现这样的需求，应该更多使用组合的方式以代替继承，以及函数式编程也许是更好的方案。</p><p><br></p><h2><b>4. 总结</b></h2><p>本文从 JavaScript 语言机制出发，回顾了随着语言的进步，“类” 与“继承”在 JavaScript 中变得越来越方便。然后讨论了“多继承”时需要考虑的问题，介绍了 Method Resolution Order (MRO) 和C3算法，并尝试在 JavaScript 中模拟“多继承 ”。</p><p>然而，JavaScript 本质上不存在“类”的概念，也不存在真正意义上的继承。这种通过 prototype 模拟出来的“多继承”必然不会太完美，体验上比原生支持继承的语言 要差的多。因此不要想着多继承，JavaScript 中也不建议频繁使用继承。</p><p><br></p><p><b>参考资料</b></p><p><a href="http://link.zhihu.com/?target=https%3A//github.com/getify/You-Dont-Know-JS/blob/master/this%2520%2526%2520object%2520prototypes/ch4.md" class=" wrap external" target="_blank" rel="nofollow noreferrer">You Don\'t Know JS: this &amp; Object Prototypes</a></p><p><a href="http://link.zhihu.com/?target=https%3A//docs.oracle.com/javase/tutorial/java/IandI/polymorphism.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">Java Doc: Polymorphism</a></p><p><a href="http://link.zhihu.com/?target=https%3A//www.python.org/download/releases/2.3/mro/" class=" wrap external" target="_blank" rel="nofollow noreferrer">The Python 2.3 Method Resolution Order</a></p><p><a href="http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/C3_linearization" class=" wrap external" target="_blank" rel="nofollow noreferrer">C3 linearization</a></p><p><a href="http://link.zhihu.com/?target=https%3A//github.com/dojo/dojo/blob/master/_base/declare.js%23L554" class=" wrap external" target="_blank" rel="nofollow noreferrer">dojo class declaration</a></p><p></p>', 'commentCount': 10, 'imageUrl': 'https://pic4.zhimg.com/50/v2-6d155871c5b8c13acf389e002e39adea_hd.jpg', 'linkbox': {'url': '', 'category': '', 'pic': '', 'title': ''}, 'excerptNew': '首先 JavaScript 中不存在多继承，并且也不推荐使用继承。如果你也这么认为的话，那笔者的观点也就 写完啦 233333…. 如果还想回顾下 JavaScript 中“继承”的前世今生，以及对“多继承”的讨论，不妨慢慢看下去。1. 苦苦追求的语法糖 在 ES6 出现以前，在还没有…', 'excerptTitle': '', 'previewText': '', 'voting': 0, 'type': 'article'}}, 'columns': {}, 'topics': {}, 'roundtables': {}, 'favlists': {}, 'comments': {}, 'notifications': {}, 'ebooks': {}, 'activities': {'1540044691': {'verb': 'QUESTION_FOLLOW', 'target': {'id': 42178612, 'schema': 'question'}, 'actor': {'isFollowed': False, 'type': 'people', 'name': 'hi-captain', 'headline': '艺术，文学。。。', 'urlToken': 'aiyou_wocao', 'userType': 'people', 'vipInfo': {'isVip': False}, 'url': 'https://api.zhihu.com/people/6a49911d7fa411c39beb1684516f19bd', 'avatarUrl': 'https://pic2.zhimg.com/50/e0203d1c978484d69528ca6b02138913_s.jpg', 'isFollowing': False, 'isOrg': False, 'gender': 1, 'badge': [], 'id': '6a49911d7fa411c39beb1684516f19bd'}, 'actionText': '关注了问题', 'createdTime': 1540044691, 'type': 'feed', 'id': '1540044691'}, '1540439187': {'verb': 'ANSWER_VOTE_UP', 'target': {'id': 513858598, 'schema': 'answer'}, 'actor': {'isFollowed': False, 'type': 'people', 'name': 'hi-captain', 'headline': '艺术，文学。。。', 'urlToken': 'aiyou_wocao', 'userType': 'people', 'vipInfo': {'isVip': False}, 'url': 'https://api.zhihu.com/people/6a49911d7fa411c39beb1684516f19bd', 'avatarUrl': 'https://pic2.zhimg.com/50/e0203d1c978484d69528ca6b02138913_s.jpg', 'isFollowing': False, 'isOrg': False, 'gender': 1, 'badge': [], 'id': '6a49911d7fa411c39beb1684516f19bd'}, 'actionText': '赞同了回答', 'createdTime': 1540439187, 'type': 'feed', 'id': '1540439187'}, '1540486900': {'verb': 'ANSWER_VOTE_UP', 'target': {'id': 370158183, 'schema': 'answer'}, 'actor': {'isFollowed': False, 'type': 'people', 'name': 'hi-captain', 'headline': '艺术，文学。。。', 'urlToken': 'aiyou_wocao', 'userType': 'people', 'vipInfo': {'isVip': False}, 'url': 'https://api.zhihu.com/people/6a49911d7fa411c39beb1684516f19bd', 'avatarUrl': 'https://pic2.zhimg.com/50/e0203d1c978484d69528ca6b02138913_s.jpg', 'isFollowing': False, 'isOrg': False, 'gender': 1, 'badge': [], 'id': '6a49911d7fa411c39beb1684516f19bd'}, 'actionText': '赞同了回答', 'createdTime': 1540486900, 'type': 'feed', 'id': '1540486900'}, '1540492155': {'verb': 'ANSWER_VOTE_UP', 'target': {'id': 508371868, 'schema': 'answer'}, 'actor': {'isFollowed': False, 'type': 'people', 'name': 'hi-captain', 'headline': '艺术，文学。。。', 'urlToken': 'aiyou_wocao', 'userType': 'people', 'vipInfo': {'isVip': False}, 'url': 'https://api.zhihu.com/people/6a49911d7fa411c39beb1684516f19bd', 'avatarUrl': 'https://pic2.zhimg.com/50/e0203d1c978484d69528ca6b02138913_s.jpg', 'isFollowing': False, 'isOrg': False, 'gender': 1, 'badge': [], 'id': '6a49911d7fa411c39beb1684516f19bd'}, 'actionText': '赞同了回答', 'createdTime': 1540492155, 'type': 'feed', 'id': '1540492155'}, '1541669338': {'verb': 'ANSWER_VOTE_UP', 'target': {'id': 508850373, 'schema': 'answer'}, 'actor': {'isFollowed': False, 'type': 'people', 'name': 'hi-captain', 'headline': '艺术，文学。。。', 'urlToken': 'aiyou_wocao', 'userType': 'people', 'vipInfo': {'isVip': False}, 'url': 'https://api.zhihu.com/people/6a49911d7fa411c39beb1684516f19bd', 'avatarUrl': 'https://pic2.zhimg.com/50/e0203d1c978484d69528ca6b02138913_s.jpg', 'isFollowing': False, 'isOrg': False, 'gender': 1, 'badge': [], 'id': '6a49911d7fa411c39beb1684516f19bd'}, 'actionText': '赞同了回答', 'createdTime': 1541669338, 'type': 'feed', 'id': '1541669338'}, '1542276336': {'verb': 'ANSWER_VOTE_UP', 'target': {'id': 449769461, 'schema': 'answer'}, 'actor': {'isFollowed': False, 'type': 'people', 'name': 'hi-captain', 'headline': '艺术，文学。。。', 'urlToken': 'aiyou_wocao', 'userType': 'people', 'vipInfo': {'isVip': False}, 'url': 'https://api.zhihu.com/people/6a49911d7fa411c39beb1684516f19bd', 'avatarUrl': 'https://pic2.zhimg.com/50/e0203d1c978484d69528ca6b02138913_s.jpg', 'isFollowing': False, 'isOrg': False, 'gender': 1, 'badge': [], 'id': '6a49911d7fa411c39beb1684516f19bd'}, 'actionText': '赞同了回答', 'createdTime': 1542276336, 'type': 'feed', 'id': '1542276336'}, '1542644930': {'verb': 'MEMBER_VOTEUP_ARTICLE', 'target': {'id': 34693209, 'schema': 'article'}, 'actor': {'isFollowed': False, 'type': 'people', 'name': 'hi-captain', 'headline': '艺术，文学。。。', 'urlToken': 'aiyou_wocao', 'userType': 'people', 'vipInfo': {'isVip': False}, 'url': 'https://api.zhihu.com/people/6a49911d7fa411c39beb1684516f19bd', 'avatarUrl': 'https://pic2.zhimg.com/50/e0203d1c978484d69528ca6b02138913_s.jpg', 'isFollowing': False, 'isOrg': False, 'gender': 1, 'badge': [], 'id': '6a49911d7fa411c39beb1684516f19bd'}, 'actionText': '赞了文章', 'createdTime': 1542644930, 'type': 'feed', 'id': '1542644930'}}, 'feeds': {}, 'pins': {}, 'positions': {}, 'promotions': {}, 'drafts': {}}, 'currentUser': '', 'account': {'lockLevel': {}, 'unlockTicketStatus': False, 'unlockTicket': None, 'challenge': [], 'errorStatus': False, 'message': '', 'isFetching': False, 'accountInfo': {}, 'urlToken': {'loading': False}}, 'settings': {'socialBind': None, 'inboxMsg': None, 'notification': {}, 'email': {}, 'privacyFlag': None, 'blockedUsers': {'isFetching': False, 'paging': {'pageNo': 1, 'pageSize': 6}, 'data': []}, 'blockedFollowees': {'isFetching': False, 'paging': {'pageNo': 1, 'pageSize': 6}, 'data': []}, 'ignoredTopics': {'isFetching': False, 'paging': {'pageNo': 1, 'pageSize': 6}, 'data': []}, 'restrictedTopics': None, 'laboratory': {}}, 'notification': {}, 'people': {'profileStatus': {'aiyou_wocao': {'token': {'id': '6a49911d7fa411c39beb1684516f19bd', 'urlToken': 'aiyou_wocao'}, 'isFetching': False, 'isDrained': True}}, 'activitiesByUser': {'aiyou_wocao': {'isFetching': False, 'isDrained': False, 'ids': ['1542644930', '1542276336', '1541669338', '1540492155', '1540486900', '1540439187', '1540044691'], 'newIds': ['1542644930', '1542276336', '1541669338', '1540492155', '1540486900', '1540439187', '1540044691'], 'previous': 'http://www.zhihu.com/api/v4/members/aiyou_wocao/activities?before_id=1542644930&limit=7&desktop=True', 'next': 'http://www.zhihu.com/api/v4/members/aiyou_wocao/activities?limit=7&after_id=1540044691&desktop=True'}}, 'answersByUser': {}, 'answersSortByVotesByUser': {}, 'answersIncludedByUser': {}, 'votedAnswersByUser': {}, 'thankedAnswersByUser': {}, 'voteAnswersByUser': {}, 'thankAnswersByUser': {}, 'topicAnswersByUser': {}, 'articlesByUser': {}, 'articlesSortByVotesByUser': {}, 'articlesIncludedByUser': {}, 'pinsByUser': {}, 'positionsByUser': {}, 'questionsByUser': {}, 'commercialQuestionsByUser': {}, 'favlistsByUser': {}, 'followingByUser': {}, 'followersByUser': {}, 'mutualsByUser': {}, 'followingColumnsByUser': {}, 'followingQuestionsByUser': {}, 'followingFavlistsByUser': {}, 'followingTopicsByUser': {}, 'publicationsByUser': {}, 'columnsByUser': {}, 'allFavlistsByUser': {}, 'brands': None, 'creationsByUser': {}, 'creationsSortByVotesByUser': {}}, 'env': {'ab': {'config': {'experiments': [{'expId': 'launch-ad_ios_lans-2', 'expPrefix': 'ad_ios_lans', 'isDynamicallyUpdated': True, 'isRuntime': True, 'includeTriggerInfo': False}, {'expId': 'launch-gw_adr_dkts-11', 'expPrefix': 'gw_adr_dkts', 'isDynamicallyUpdated': True, 'isRuntime': False, 'includeTriggerInfo': False}, {'expId': 'launch-gw_adr_mini-2', 'expPrefix': 'gw_adr_mini', 'isDynamicallyUpdated': True, 'isRuntime': False, 'includeTriggerInfo': False}, {'expId': 'launch-gw_adr_wbtp-2', 'expPrefix': 'gw_adr_wbtp', 'isDynamicallyUpdated': True, 'isRuntime': False, 'includeTriggerInfo': False}, {'expId': 'launch-gw_adr_wxfb-2', 'expPrefix': 'gw_adr_wxfb', 'isDynamicallyUpdated': True, 'isRuntime': False, 'includeTriggerInfo': False}, {'expId': 'launch-gw_anr_wxbk-2', 'expPrefix': 'gw_anr_wxbk', 'isDynamicallyUpdated': True, 'isRuntime': False, 'includeTriggerInfo': False}, {'expId': 'launch-gw_ios_dkts-8', 'expPrefix': 'gw_ios_dkts', 'isDynamicallyUpdated': True, 'isRuntime': False, 'includeTriggerInfo': False}, {'expId': 'launch-gw_ios_mini-2', 'expPrefix': 'gw_ios_mini', 'isDynamicallyUpdated': True, 'isRuntime': False, 'includeTriggerInfo': False}, {'expId': 'launch-gw_ios_wxb-2', 'expPrefix': 'gw_ios_wxb', 'isDynamicallyUpdated': True, 'isRuntime': False, 'includeTriggerInfo': False}, {'expId': 'launch-gw_ios_wxfb-1', 'expPrefix': 'gw_ios_wxfb', 'isDynamicallyUpdated': True, 'isRuntime': False, 'includeTriggerInfo': False}, {'expId': 'launch-gw_wbtp-2', 'expPrefix': 'gw_wbtp', 'isDynamicallyUpdated': True, 'isRuntime': False, 'includeTriggerInfo': False}, {'expId': 'launch-mp_amap_ios-1', 'expPrefix': 'mp_amap_ios', 'isDynamicallyUpdated': True, 'isRuntime': False, 'includeTriggerInfo': False}, {'expId': 'launch-mp_apm-1', 'expPrefix': 'mp_apm', 'isDynamicallyUpdated': True, 'isRuntime': False, 'includeTriggerInfo': False}, {'expId': 'launch-mp_hb_si-3', 'expPrefix': 'mp_hb_si', 'isDynamicallyUpdated': True, 'isRuntime': False, 'includeTriggerInfo': False}, {'expId': 'launch-mp_ios_bvc-2', 'expPrefix': 'mp_ios_bvc', 'isDynamicallyUpdated': True, 'isRuntime': False, 'includeTriggerInfo': False}, {'expId': 'launch-mp_ios_webp-2', 'expPrefix': 'mp_ios_webp', 'isDynamicallyUpdated': True, 'isRuntime': False, 'includeTriggerInfo': False}, {'expId': 'launch-mp_video_feed-2', 'expPrefix': 'mp_video_feed', 'isDynamicallyUpdated': False, 'isRuntime': False, 'includeTriggerInfo': False}, {'expId': 'launch-se_ios_topsearch-2', 'expPrefix': 'se_ios_topsearch', 'isDynamicallyUpdated': False, 'isRuntime': False, 'includeTriggerInfo': False}, {'expId': 'launch-top_dtmt-10', 'expPrefix': 'top_dtmt', 'isDynamicallyUpdated': True, 'isRuntime': False, 'includeTriggerInfo': False}, {'expId': 'launch-top_feed_card-1', 'expPrefix': 'top_feed_card', 'isDynamicallyUpdated': True, 'isRuntime': False, 'includeTriggerInfo': False}, {'expId': 'launch-vd_adrupload_cdn-2', 'expPrefix': 'vd_adrupload_cdn', 'isDynamicallyUpdated': False, 'isRuntime': False, 'includeTriggerInfo': False}, {'expId': 'launch-vd_player_agent-2', 'expPrefix': 'vd_player_agent', 'isDynamicallyUpdated': True, 'isRuntime': False, 'includeTriggerInfo': False}, {'expId': 'launch-vd_ppt_enter_2-2', 'expPrefix': 'vd_ppt_enter_2', 'isDynamicallyUpdated': True, 'isRuntime': False, 'includeTriggerInfo': False}, {'expId': 'launch-vd_upload_cdn-2', 'expPrefix': 'vd_upload_cdn', 'isDynamicallyUpdated': False, 'isRuntime': False, 'includeTriggerInfo': False}, {'expId': 'launch-vd_zm_core-2', 'expPrefix': 'vd_zm_core', 'isDynamicallyUpdated': False, 'isRuntime': False, 'includeTriggerInfo': False}], 'params': [{'id': 'adr_pdf', 'type': 'String', 'value': 'n'}, {'id': 'hb_recommend_column', 'type': 'String', 'value': '1'}, {'id': 'ios_mini', 'type': 'String', 'value': '1'}, {'id': 'se_gemini_service', 'type': 'String', 'value': 'content', 'chainId': '_all_'}, {'id': 'top_deep_promo', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'web_new_label', 'type': 'String', 'value': '0'}, {'id': 'adr_liguangi_test', 'type': 'String', 'value': '1'}, {'id': 'adr_rlp', 'type': 'String', 'value': '0'}, {'id': 'ios_searchbox', 'type': 'String', 'value': '0'}, {'id': 'adr_recommend_column', 'type': 'String', 'value': '0'}, {'id': 'ios_ff_cardtype', 'type': 'String', 'value': 'A'}, {'id': 'ls_new_score', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_cc_at', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'top_rerank_breakin', 'type': 'String', 'value': '-1', 'chainId': '_all_'}, {'id': 'top_tffrt', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'tp_discussion_feed_card_type', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'adr_dkts', 'type': 'String', 'value': '20'}, {'id': 'adr_q_bar', 'type': 'String', 'value': 'NO'}, {'id': 'se_gi', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'adr_mbv', 'type': 'String', 'value': 'false'}, {'id': 'ios_answer_preload', 'type': 'String', 'value': '0'}, {'id': 'ls_is_use_zrec', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_login_card', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'ios_magitab', 'type': 'String', 'value': '0'}, {'id': 'ios_ps', 'type': 'String', 'value': '0'}, {'id': 'top_free_content', 'type': 'String', 'value': '-1', 'chainId': '_all_'}, {'id': 'top_nmt', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_vd_op', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'adr_android_gdt', 'type': 'String', 'value': 'open'}, {'id': 'adr_ques_comment', 'type': 'String', 'value': '0'}, {'id': 'hb_major_onebox', 'type': 'String', 'value': '0'}, {'id': 'ios_pdf', 'type': 'String', 'value': 'n'}, {'id': 'top_hweb', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_new_feed', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'web_heifetz_grow_ad', 'type': 'String', 'value': '0'}, {'id': 'top_gr_auto_model', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_retag', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_video_fix_position', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'adr_more_hyb_card', 'type': 'String', 'value': '0'}, {'id': 'adr_prt', 'type': 'String', 'value': 'false'}, {'id': 'ios_video_agent_4_28', 'type': 'String', 'value': 'false'}, {'id': 'se_new_market_search', 'type': 'String', 'value': 'off', 'chainId': '_all_'}, {'id': 'top_feedre_rtt', 'type': 'String', 'value': '41', 'chainId': '_all_'}, {'id': 'top_wonderful', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'ios_notif_new_invite', 'type': 'String', 'value': 'off'}, {'id': 'adr_edit_question', 'type': 'String', 'value': '0'}, {'id': 'adr_ppt_enter', 'type': 'String', 'value': '1'}, {'id': 'adr_question_invite_v2', 'type': 'String', 'value': '0'}, {'id': 'adr_real_time_launch_http', 'type': 'String', 'value': 'http_off'}, {'id': 'adr_telecom_login', 'type': 'String', 'value': '1'}, {'id': 'hb_active_answerer', 'type': 'String', 'value': '0'}, {'id': 'hb_report', 'type': 'String', 'value': '0'}, {'id': 'ios_vm_subject_type', 'type': 'String', 'value': '0'}, {'id': 'se_relevant_query', 'type': 'String', 'value': 'new', 'chainId': '_all_'}, {'id': 'top_is_gr', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_tagore', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'adr_wxfb', 'type': 'String', 'value': '0'}, {'id': 'se_minor_onebox', 'type': 'String', 'value': 'd', 'chainId': '_all_'}, {'id': 'se_product_rank_list', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_memberfree', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'top_nid', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'adr_guest_login', 'type': 'String', 'value': '0'}, {'id': 'adr_traffic_threshold', 'type': 'String', 'value': '314572800'}, {'id': 'adr_use_gd', 'type': 'String', 'value': 'n'}, {'id': 'se_cm', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'top_ntr', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'top_video_rew', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'adr_bugly', 'type': 'String', 'value': 'n'}, {'id': 'ios_ad_cta', 'type': 'String', 'value': '0'}, {'id': 'top_bill', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_gif', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_lowup', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'top_mlt_model', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_nuc', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_universalebook', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'adr_comment_new_editor', 'type': 'String', 'value': '0'}, {'id': 'adr_consult', 'type': 'String', 'value': '0'}, {'id': 'hb_best_answerer', 'type': 'String', 'value': '0'}, {'id': 'top_billab', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_distinction', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_newfollowans', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_sj', 'type': 'String', 'value': '2', 'chainId': '_all_'}, {'id': 'top_vds_alb_pos', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'tp_sft', 'type': 'String', 'value': 'a', 'chainId': '_all_'}, {'id': 'adr_cashier_color', 'type': 'String', 'value': '0'}, {'id': 'adr_feed_video_continuous', 'type': 'String', 'value': '0'}, {'id': 'adr_grow_guide_login_4', 'type': 'String', 'value': '3'}, {'id': 'adr_refresh_token', 'type': 'String', 'value': '1'}, {'id': 'hb_stream_render', 'type': 'String', 'value': '0'}, {'id': 'top_video_score', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'hb_live_btn_color', 'type': 'String', 'value': 'default_color'}, {'id': 'ios_km_center', 'type': 'String', 'value': '0'}, {'id': 'se_ad_index', 'type': 'String', 'value': '10', 'chainId': '_all_'}, {'id': 'adr_video_topic_volume_control', 'type': 'String', 'value': '0'}, {'id': 'top_ebook', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_recall_core_interest', 'type': 'String', 'value': '81', 'chainId': '_all_'}, {'id': 'top_vdio_rew', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'adr_mini', 'type': 'String', 'value': '1'}, {'id': 'adr_video_upload_cdn', 'type': 'String', 'value': '1'}, {'id': 'top_f_r_nb', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'top_topic_feedre', 'type': 'String', 'value': '21', 'chainId': '_all_'}, {'id': 'adr_new_roundtable', 'type': 'String', 'value': 'true'}, {'id': 'ios_ad_web_cache', 'type': 'String', 'value': '0'}, {'id': 'ios_invite_ans', 'type': 'String', 'value': 'A'}, {'id': 'top_ac_merge', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_billread', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'top_billvideo', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_follow_reason', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'se_time_search', 'type': 'String', 'value': 'origin', 'chainId': '_all_'}, {'id': 'adr_launch_ad_new_strategy', 'type': 'String', 'value': 'open'}, {'id': 'ios_next_ans', 'type': 'String', 'value': 'N'}, {'id': 'top_new_user_gift', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_promo', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'adr_article_misc', 'type': 'String', 'value': '0'}, {'id': 'se_refactored_search_index', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_multi_model', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_quality', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_root_ac', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'tp_write_pin_guide', 'type': 'String', 'value': '3', 'chainId': '_all_'}, {'id': 'web_new_comment', 'type': 'String', 'value': '0'}, {'id': 'ios_adr_vid_vol', 'type': 'String', 'value': '0'}, {'id': 'ios_le_nav', 'type': 'String', 'value': '0'}, {'id': 'top_root_web', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'adr_audio_enable_exo', 'type': 'String', 'value': '0'}, {'id': 'ios_consultation', 'type': 'String', 'value': '0'}, {'id': 'ios_pay_view', 'type': 'String', 'value': 'new'}, {'id': 'se_dl', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'top_roundtable', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'top_tuner_refactor', 'type': 'String', 'value': '-1', 'chainId': '_all_'}, {'id': 'adr_article_new_comment', 'type': 'String', 'value': '0'}, {'id': 'top_hca', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_raf', 'type': 'String', 'value': 'n', 'chainId': '_all_'}, {'id': 'top_tag_isolation', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_v_album', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'web_question_invite', 'type': 'String', 'value': 'N'}, {'id': 'adr_anp', 'type': 'String', 'value': 'android_answer_pager_off'}, {'id': 'adr_perm', 'type': 'String', 'value': '0'}, {'id': 'ios_db_n_e', 'type': 'String', 'value': '0'}, {'id': 'se_dt', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'top_root_few_topic', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'adr_anr_watch', 'type': 'String', 'value': 'false'}, {'id': 'hb_new_upvote', 'type': 'String', 'value': 'online_upvote'}, {'id': 'ios_1752', 'type': 'String', 'value': '0'}, {'id': 'top_ab_validate', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_tagore_topic', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'tp_ios_topic_write_pin_guide', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'se_correct_ab', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'adr_android_launch_ad_mp4', 'type': 'String', 'value': 'open'}, {'id': 'adr_book_is_card', 'type': 'String', 'value': '0'}, {'id': 'adr_medal', 'type': 'String', 'value': '0'}, {'id': 'adr_pre_load_html', 'type': 'String', 'value': '0'}, {'id': 'hb_liguangyi_test', 'type': 'String', 'value': '1'}, {'id': 'ios_article_misc_panel', 'type': 'String', 'value': '0'}, {'id': 'ios_article_recommend_column', 'type': 'String', 'value': '0'}, {'id': 'se_entity', 'type': 'String', 'value': 'on', 'chainId': '_all_'}, {'id': 'top_newfollow', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_recall_tb', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'top_slot_ad_pos', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'top_recall_tb_long', 'type': 'String', 'value': '51', 'chainId': '_all_'}, {'id': 'adr_next_answer_btn', 'type': 'String', 'value': '0'}, {'id': 'hb_billboard', 'type': 'String', 'value': '0'}, {'id': 'ios_dkts', 'type': 'String', 'value': '20'}, {'id': 'ios_input_image', 'type': 'String', 'value': '1'}, {'id': 'ios_more_editcard', 'type': 'String', 'value': 'true'}, {'id': 'ios_profile_sig', 'type': 'String', 'value': 'true'}, {'id': 'se_daxuechuisou', 'type': 'String', 'value': 'new', 'chainId': '_all_'}, {'id': 'top_videos_priority', 'type': 'String', 'value': '-1', 'chainId': '_all_'}, {'id': 'ios_apm', 'type': 'String', 'value': '1'}, {'id': 'ios_hybrid_intercepting', 'type': 'String', 'value': '1'}, {'id': 'top_billupdate1', 'type': 'String', 'value': '2', 'chainId': '_all_'}, {'id': 'adr_traffic_monitor', 'type': 'String', 'value': 'false'}, {'id': 'ios_q_a_c', 'type': 'String', 'value': '0'}, {'id': 'se_consulting_switch', 'type': 'String', 'value': 'off', 'chainId': '_all_'}, {'id': 'top_nad', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'adr_android_medal_badge_view', 'type': 'String', 'value': 'false'}, {'id': 'adr_profile_medal', 'type': 'String', 'value': '0'}, {'id': 'ios_ge4', 'type': 'String', 'value': '3'}, {'id': 'pin_efs', 'type': 'String', 'value': 'orig', 'chainId': '_all_'}, {'id': 'se_billboard', 'type': 'String', 'value': '3', 'chainId': '_all_'}, {'id': 'top_recall_tb_follow', 'type': 'String', 'value': '71', 'chainId': '_all_'}, {'id': 'ios_launch_timeout', 'type': 'String', 'value': '-1'}, {'id': 'ios_q_bar', 'type': 'String', 'value': 'NO'}, {'id': 'top_ad_slot', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'top_feedre_cpt', 'type': 'String', 'value': '101', 'chainId': '_all_'}, {'id': 'top_followtop', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'adr_unfollow_reason', 'type': 'String', 'value': '0'}, {'id': 'adr_wbtp', 'type': 'String', 'value': '1'}, {'id': 'ios_7324', 'type': 'String', 'value': '0'}, {'id': 'top_vd_gender', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'adr_ans_video', 'type': 'String', 'value': 'N'}, {'id': 'ios_article_new_comment', 'type': 'String', 'value': '0'}, {'id': 'ios_real_time_launch_http', 'type': 'String', 'value': 'http_off'}, {'id': 'se_auto_syn', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'se_ltr', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'se_majorob_style', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_feedre', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'ios_vid_qt', 'type': 'String', 'value': '0'}, {'id': 'ios_webp', 'type': 'String', 'value': '1'}, {'id': 'pin_ef', 'type': 'String', 'value': 'orig', 'chainId': '_all_'}, {'id': 'top_hqt', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'ios_search_tab', 'type': 'String', 'value': '0'}, {'id': 'top_mt', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'tp_favsku', 'type': 'String', 'value': 'a', 'chainId': '_all_'}, {'id': 'web_column_auto_invite', 'type': 'String', 'value': '0'}, {'id': 'adr_mqtt_5_24_0', 'type': 'String', 'value': '0'}, {'id': 'se_rescore', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'se_tf', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'top_rerank_reweight', 'type': 'String', 'value': '-1', 'chainId': '_all_'}, {'id': 'top_root', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'adr_test_delete', 'type': 'String', 'value': '0'}, {'id': 'ios_quill_editor', 'type': 'String', 'value': '0'}, {'id': 'ios_video_upload_cdn', 'type': 'String', 'value': '1'}, {'id': 'top_local', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'top_recall_tb_short', 'type': 'String', 'value': '61', 'chainId': '_all_'}, {'id': 'top_uit', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'adr_invite', 'type': 'String', 'value': 'false'}, {'id': 'hb_consulting_price', 'type': 'String', 'value': 'np'}, {'id': 'ios_question_new_comment', 'type': 'String', 'value': '0'}, {'id': 'top_alt', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_recommend_topic_card', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_rerank_isolation', 'type': 'String', 'value': '-1', 'chainId': '_all_'}, {'id': 'top_sjre', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'adr_profile_label', 'type': 'String', 'value': '1'}, {'id': 'top_nucc', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_vd_rt_int', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'zr_ans_rec', 'type': 'String', 'value': 'gbrank', 'chainId': '_all_'}, {'id': 'adr_video_ne_comment', 'type': 'String', 'value': '0'}, {'id': 'ios_amap', 'type': 'String', 'value': 'y'}, {'id': 'ios_telecom_login', 'type': 'String', 'value': '1'}, {'id': 'top_nszt', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'web_stream_render', 'type': 'String', 'value': '0'}, {'id': 'adr_guest_refresh', 'type': 'String', 'value': '1'}, {'id': 'ios_answer_hybrid_preload', 'type': 'String', 'value': '0'}, {'id': 'ios_asp', 'type': 'String', 'value': 'off'}, {'id': 'top_recall', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'tp_discussion_feed_type_android', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'adr_comment', 'type': 'String', 'value': 'false'}, {'id': 'adr_sdk_data_switch', 'type': 'String', 'value': '0'}, {'id': 'ios_qtoc', 'type': 'String', 'value': '0'}, {'id': 'top_adpar', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_gr_model', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_root_mg', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'adr_cta', 'type': 'String', 'value': '0'}, {'id': 'adr_editor_version', 'type': 'String', 'value': 'V2'}, {'id': 'adr_sqtc', 'type': 'String', 'value': '1'}, {'id': 'top_an', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'web_heifetz_column_api2', 'type': 'String', 'value': '0'}, {'id': 'hb_new_label', 'type': 'String', 'value': '0'}, {'id': 'hb_unfollow_reason', 'type': 'String', 'value': '0'}, {'id': 'ios_video_agent_4_22', 'type': 'String', 'value': 'false'}, {'id': 'se_cq', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'adr_task_statistics', 'type': 'String', 'value': 'false'}, {'id': 'ios_vid_home', 'type': 'String', 'value': '0'}, {'id': 'top_no_weighing', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'adr_topsearch', 'type': 'String', 'value': '2'}, {'id': 'adr_use_cashier', 'type': 'String', 'value': 'new'}, {'id': 'ios_question_invite_v2', 'type': 'String', 'value': '0'}, {'id': 'top_card', 'type': 'String', 'value': '-1', 'chainId': '_all_'}, {'id': 'adr_unif', 'type': 'String', 'value': 'off'}, {'id': 'ios_hybrid_editor_v3', 'type': 'String', 'value': '0'}, {'id': 'ios_video_continuous', 'type': 'String', 'value': '0'}, {'id': 'adr_ps', 'type': 'String', 'value': '0'}, {'id': 'ios_wbtp', 'type': 'String', 'value': '1'}, {'id': 'adr_member_switch', 'type': 'String', 'value': '0'}, {'id': 'adr_spic', 'type': 'String', 'value': '0'}, {'id': 'ios_add_question_v2', 'type': 'String', 'value': '0'}, {'id': 'ios_ad_skip_pos', 'type': 'String', 'value': 'up'}, {'id': 'ios_topsearch', 'type': 'String', 'value': '1'}, {'id': 'top_yc', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_rank', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'adr_challenge_plan', 'type': 'String', 'value': '3'}, {'id': 'adr_mqtt', 'type': 'String', 'value': '0'}, {'id': 'adr_zmcore', 'type': 'String', 'value': '1'}, {'id': 'ios_ios_launch_mp4', 'type': 'String', 'value': '1'}, {'id': 'ios_mlssq', 'type': 'String', 'value': '0'}, {'id': 'se_backsearch', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'se_major_onebox', 'type': 'String', 'value': 'major', 'chainId': '_all_'}, {'id': 'top_retagg', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'ios_comment', 'type': 'String', 'value': '0'}, {'id': 'se_ingress', 'type': 'String', 'value': 'on', 'chainId': '_all_'}, {'id': 'ios_spic', 'type': 'String', 'value': '0'}, {'id': 'adr_new_answer_pager', 'type': 'String', 'value': 'false'}, {'id': 'ios_cashier_color', 'type': 'String', 'value': '0'}, {'id': 'ios_lans', 'type': 'String', 'value': 'close'}, {'id': 'ios_q_o_b', 'type': 'String', 'value': '0'}, {'id': 'top_gr_topic_reweight', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_user_gift', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_yhgc', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_rerank_repos', 'type': 'String', 'value': '-1', 'chainId': '_all_'}, {'id': 'adr_traffic_leak', 'type': 'String', 'value': 'false'}, {'id': 'hb_entity_ui', 'type': 'String', 'value': 'origin'}, {'id': 'ios_lssq', 'type': 'String', 'value': '0'}, {'id': 'ios_video_feed', 'type': 'String', 'value': '1'}, {'id': 'ios_wxbk', 'type': 'String', 'value': '1'}, {'id': 'top_manual_tag', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'top_recall_follow_user', 'type': 'String', 'value': '91', 'chainId': '_all_'}, {'id': 'web_card_style', 'type': 'String', 'value': 'b'}, {'id': 'adr_wxbk', 'type': 'String', 'value': '1'}, {'id': 'ios_profile_badge', 'type': 'String', 'value': 'true'}, {'id': 'se_consulting_price', 'type': 'String', 'value': 'n', 'chainId': '_all_'}, {'id': 'top_30', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_dtmt', 'type': 'String', 'value': '2', 'chainId': '_all_'}, {'id': 'top_feedre_itemcf', 'type': 'String', 'value': '31', 'chainId': '_all_'}, {'id': 'top_fqa', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'ios_medal_badge_view', 'type': 'String', 'value': 'false'}, {'id': 'ios_new_player', 'type': 'String', 'value': '0'}, {'id': 'ios_wxfb', 'type': 'String', 'value': '0'}, {'id': 'se_billboardsearch', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_pfq', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_tmt', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_tr', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'ios_book_is_card', 'type': 'String', 'value': '1'}, {'id': 'ios_question_answer_preload', 'type': 'String', 'value': '0'}, {'id': 'se_merger', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'se_wiki_box', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'top_spec_promo', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'adr_osen_label', 'type': 'String', 'value': 'old'}, {'id': 'se_engine', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'se_qc', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_recall_deep_user', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'adr_new_hybrid', 'type': 'String', 'value': '0'}, {'id': 'ios_psn', 'type': 'String', 'value': 'n'}, {'id': 'ios_roundtable', 'type': 'String', 'value': 'B'}, {'id': 'ios_x_z_c0', 'type': 'String', 'value': '1'}, {'id': 'ls_new_video', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'se_websearch', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_billboard_count', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'top_test_4_liguangyi', 'type': 'String', 'value': '1', 'chainId': '_all_'}, {'id': 'adr_consultation', 'type': 'String', 'value': '0'}, {'id': 'hb_majorob_style', 'type': 'String', 'value': '0'}, {'id': 'top_fqai', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'adr_android_video_continuous', 'type': 'String', 'value': '0'}, {'id': 'adr_enable_agent', 'type': 'String', 'value': '1'}, {'id': 'se_filter', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_billpic', 'type': 'String', 'value': '0', 'chainId': '_all_'}, {'id': 'top_feedtopiccard', 'type': 'String', 'value': '0', 'chainId': '_all_'}], 'chains': [{'chainId': '_all_'}]}, 'triggers': {}}, 'userAgent': {'Edge': False, 'Wechat': False, 'Weibo': False, 'QQ': False, 'Qzone': False, 'Mobile': False, 'Android': False, 'iOS': False, 'isAppleDevice': False, 'Zhihu': False, 'ZhihuHybrid': False, 'isBot': False, 'Tablet': False, 'UC': False, 'Sogou': False, 'Qihoo': False, 'Baidu': False, 'BaiduApp': False, 'isWebView': False, 'origin': 'Python-urllib/3.7'}, 'trafficSource': 'production', 'edition': {'baidu': False, 'sogou': False, 'baiduBeijing': False, 'yidianzixun': False}, 'theme': 'light', 'referer': '', 'conf': {}, 'ipInfo': {}, 'logged': False, 'tdkInfo': {}}, 'me': {'accountInfoLoadStatus': {}, 'organizationProfileStatus': {}, 'columnContributions': []}, 'label': {}, 'comments': {'stickers': [], 'commentWithPicPermission': {}, 'notificationsComments': {}, 'pagination': {}, 'collapsed': {}, 'reverse': {}, 'reviewing': {}, 'conversation': {}, 'conversationMore': {}, 'parent': {}}, 'pushNotifications': {'default': {'isFetching': False, 'isDrained': False, 'ids': []}, 'follow': {'isFetching': False, 'isDrained': False, 'ids': []}, 'vote_thank': {'isFetching': False, 'isDrained': False, 'ids': []}, 'currentTab': 'default', 'notificationsCount': {'default': 0, 'follow': 0, 'vote_thank': 0}}, 'messages': {'data': {}, 'currentTab': 'common', 'messageCount': 0}, 'register': {'registerValidateSucceeded': None, 'registerValidateErrors': {}, 'registerConfirmError': None, 'sendDigitsError': None, 'registerConfirmSucceeded': None}, 'login': {'loginUnregisteredError': False, 'loginBindWechatError': False, 'loginConfirmError': None, 'sendDigitsError': None, 'validateDigitsError': False, 'loginConfirmSucceeded': None, 'qrcodeLoginToken': '', 'qrcodeLoginScanStatus': 0, 'qrcodeLoginError': None, 'qrcodeLoginReturnNewToken': False}, 'active': {'sendDigitsError': None, 'activeConfirmSucceeded': None, 'activeConfirmError': None}, 'switches': {'vipSwitches': {'mAINSWITCH': False, 'wIDGET': False, 'vIPCUSTOMERSERVICE': False, 'rECOMMENDBLOCKKEYWORDS': False, 'pROFILETOPARTICLE': False, 'cOMMENTSUPPORTIMAGE': False, 'vIPICON': False, 'sPEEDRENAME': False, 'eXCLUSIVEEXPRESSION': False}}, 'captcha': {'captchaNeeded': False, 'captchaValidated': False, 'captchaBase64String': None, 'captchaValidationMessage': None, 'loginCaptchaExpires': False}, 'sms': {'supportedCountries': []}, 'coupon': {'isRedeemingCoupon': False}, 'question': {'followers': {}, 'concernedFollowers': {}, 'answers': {}, 'hiddenAnswers': {}, 'createdAnswers': {}, 'collapsedAnswers': {}, 'notificationAnswers': {}, 'invitationCandidates': {}, 'inviters': {}, 'invitees': {}, 'similarQuestions': {}, 'relatedCommodities': {}, 'recommendReadings': {}, 'bio': {}, 'brand': {}, 'permission': {}, 'advancedStyle': {}, 'commonAnswerCount': 0, 'hiddenAnswerCount': 0, 'meta': {}, 'autoInvitation': {}, 'simpleConcernedFollowers': {}}, 'shareTexts': {}, 'answers': {'voters': {}, 'copyrightApplicants': {}, 'favlists': {}, 'newAnswer': {}, 'concernedUpvoters': {}, 'simpleConcernedUpvoters': {}}, 'banner': {}, 'topic': {'bios': {}, 'hot': {}, 'newest': {}, 'top': {}, 'unanswered': {}, 'questions': {}, 'followers': {}, 'contributors': {}, 'parent': {}, 'children': {}, 'bestAnswerers': {}, 'wikiMeta': {}, 'index': {}, 'intro': {}, 'meta': {}, 'schema': {}}, 'explore': {'recommendations': {}}, 'articles': {'voters': {}}, 'favlists': {'relations': {}}, 'pins': {'voters': {}}, 'topstory': {'topstorys': {'isFetching': False, 'isDrained': False, 'afterId': 0, 'items': [], 'next': None}, 'recommend': {'isFetching': False, 'isDrained': False, 'afterId': 0, 'items': [], 'next': None}, 'follow': {'isFetching': False, 'isDrained': False, 'afterId': 0, 'items': [], 'next': None}, 'followWonderful': {'isFetching': False, 'isDrained': False, 'afterId': 0, 'items': [], 'next': None}, 'sidebar': None, 'announcement': {}, 'hotList': [], 'guestFeeds': {'isFetching': False, 'isDrained': False, 'afterId': 0, 'items': [], 'next': None}, 'followExtra': {'isNewUser': None, 'isFetched': False, 'followCount': 0, 'followers': []}}, 'upload': {}, 'video': {'data': {}}, 'guide': {'guide': {'isFetching': False, 'isShowGuide': False}}, 'reward': {'answer': {}, 'article': {}, 'question': {}}, 'search': {'recommendSearch': [], 'topSearch': {}, 'attachedInfo': {}, 'nextOffset': {}, 'generalByQuery': {}, 'generalByQueryInADay': {}, 'generalByQueryInAWeek': {}, 'generalByQueryInThreeMonths': {}, 'peopleByQuery': {}, 'topicByQuery': {}, 'columnByQuery': {}, 'liveByQuery': {}, 'albumByQuery': {}, 'eBookByQuery': {}}, 'creator': {'tools': {'question': {'invitationCount': {'questionFolloweeCount': 0, 'questionTotalCount': 0}, 'goodatTopics': []}, 'customPromotion': {'itemLists': {}}, 'recommend': {'recommendTimes': {}}}, 'explore': {'academy': {'tabs': [], 'article': {}}}, 'rights': [], 'rightsStatus': {}, 'levelUpperLimit': 10, 'account': {'growthLevel': {}}}, 'publicEditPermission': {}, 'readStatus': {}}}